[{"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\activities\\form\\ActivityForm.tsx":"1","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\layout\\App.tsx":"2","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\nav\\navbar.tsx":"3","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetails.tsx":"4","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityDashboard.tsx":"5","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityList.tsx":"6","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\index.tsx":"7","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\reportWebVitals.ts":"8","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\api\\agent.ts":"9","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\layout\\LoadingComponent.tsx":"10","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\stores\\activityStore.ts":"11","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\home\\HomePage.tsx":"12","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\layout\\ScrollToTop.tsx":"13","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityListItem.tsx":"14","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedHeader.tsx":"15","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedInfo.tsx":"16","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedChat.tsx":"17","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedSidebar.tsx":"18","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\layout\\NotFound.tsx":"19","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\common\\form\\TextInput.tsx":"20","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\common\\form\\TextAreaInput.tsx":"21","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\common\\form\\SelectInput.tsx":"22","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\common\\form\\DateInput.tsx":"23","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\common\\options\\categoryOptions.ts":"24","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\common\\util\\util.ts":"25","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\user\\LoginForm.tsx":"26","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\stores\\rootStore.ts":"27","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\models\\activity.ts":"28","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\stores\\userStore.ts":"29","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\stores\\commonStore.ts":"30","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\common\\modals\\ModalContainer.tsx":"31","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\stores\\modalStore.ts":"32","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\common\\form\\ErrorMessage.tsx":"33","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\user\\RegisterForm.tsx":"34","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityListItemAttendees.tsx":"35","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\profiles\\ProfilePage.tsx":"36","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\profiles\\ProfileHeader.tsx":"37","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\profiles\\ProfileContent.tsx":"38","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\stores\\profileStore.ts":"39","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\profiles\\ProfilePhotos.tsx":"40","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\common\\photoUpload\\PhotoUploadWidget.tsx":"41","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\common\\photoUpload\\PhotoWidgetDropzone.tsx":"42","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\common\\photoUpload\\PhotoWidgetCropper.tsx":"43"},{"size":6661,"mtime":1611044877571,"results":"44","hashOfConfig":"45"},{"size":2443,"mtime":1613392763229,"results":"46","hashOfConfig":"45"},{"size":1911,"mtime":1613281061111,"results":"47","hashOfConfig":"45"},{"size":1660,"mtime":1612691881804,"results":"48","hashOfConfig":"45"},{"size":1042,"mtime":1612264349422,"results":"49","hashOfConfig":"45"},{"size":1118,"mtime":1612264727475,"results":"50","hashOfConfig":"45"},{"size":920,"mtime":1610069361511,"results":"51","hashOfConfig":"45"},{"size":425,"mtime":1606477932152,"results":"52","hashOfConfig":"45"},{"size":3487,"mtime":1613388037995,"results":"53","hashOfConfig":"45"},{"size":372,"mtime":1609259679108,"results":"54","hashOfConfig":"45"},{"size":7230,"mtime":1612705225383,"results":"55","hashOfConfig":"45"},{"size":1839,"mtime":1612243186004,"results":"56","hashOfConfig":"45"},{"size":262,"mtime":1609680675163,"results":"57","hashOfConfig":"45"},{"size":3000,"mtime":1613205385994,"results":"58","hashOfConfig":"45"},{"size":2686,"mtime":1613205595846,"results":"59","hashOfConfig":"45"},{"size":1954,"mtime":1611043902674,"results":"60","hashOfConfig":"45"},{"size":2427,"mtime":1609768219410,"results":"61","hashOfConfig":"45"},{"size":1997,"mtime":1612705276749,"results":"62","hashOfConfig":"45"},{"size":622,"mtime":1609925844866,"results":"63","hashOfConfig":"45"},{"size":906,"mtime":1611226905535,"results":"64","hashOfConfig":"45"},{"size":898,"mtime":1610015140081,"results":"65","hashOfConfig":"45"},{"size":999,"mtime":1610022647035,"results":"66","hashOfConfig":"45"},{"size":1258,"mtime":1610105097614,"results":"67","hashOfConfig":"45"},{"size":346,"mtime":1610022647086,"results":"68","hashOfConfig":"45"},{"size":1010,"mtime":1612703732098,"results":"69","hashOfConfig":"45"},{"size":2068,"mtime":1612264571717,"results":"70","hashOfConfig":"45"},{"size":862,"mtime":1613206967999,"results":"71","hashOfConfig":"45"},{"size":928,"mtime":1612702317337,"results":"72","hashOfConfig":"45"},{"size":1868,"mtime":1612263835404,"results":"73","hashOfConfig":"45"},{"size":874,"mtime":1611659849341,"results":"74","hashOfConfig":"45"},{"size":1158,"mtime":1612264727459,"results":"75","hashOfConfig":"45"},{"size":606,"mtime":1611661715709,"results":"76","hashOfConfig":"45"},{"size":815,"mtime":1612264183078,"results":"77","hashOfConfig":"45"},{"size":2373,"mtime":1612264592842,"results":"78","hashOfConfig":"45"},{"size":796,"mtime":1612617648283,"results":"79","hashOfConfig":"45"},{"size":1327,"mtime":1613392786500,"results":"80","hashOfConfig":"45"},{"size":2221,"mtime":1613391868700,"results":"81","hashOfConfig":"45"},{"size":788,"mtime":1613289252602,"results":"82","hashOfConfig":"45"},{"size":3364,"mtime":1613392620300,"results":"83","hashOfConfig":"45"},{"size":3715,"mtime":1613392646757,"results":"84","hashOfConfig":"45"},{"size":2472,"mtime":1613390033826,"results":"85","hashOfConfig":"45"},{"size":1146,"mtime":1613392839864,"results":"86","hashOfConfig":"45"},{"size":731,"mtime":1613390033835,"results":"87","hashOfConfig":"45"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},"4c80u6",{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"90"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"90"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"90"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"90"},"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\activities\\form\\ActivityForm.tsx",[],["179","180"],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\layout\\App.tsx",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\nav\\navbar.tsx",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetails.tsx",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityDashboard.tsx",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityList.tsx",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\index.tsx",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\reportWebVitals.ts",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\api\\agent.ts",["181"],"import axios, {AxiosResponse} from 'axios';\r\nimport {IActivity} from \"../models/activity\";\r\nimport {history} from \"../../index\";\r\nimport {toast} from \"react-toastify\";\r\nimport {IUser, IUserFormValues} from \"../models/User\";\r\nimport {IPhoto, IProfile} from \"../models/Profile\";\r\n\r\naxios.defaults.baseURL = 'http://localhost:5000/api';\r\n\r\nconst axiosConfig = {\r\n    headers: {\r\n        'Content-Type': 'application/json; charset=UTF-8',\r\n        \"Access-Control-Allow-Origin\": \"*\"\r\n    }\r\n};\r\n\r\naxios.interceptors.request.use((config) => {\r\n    const token = window.localStorage.getItem('jwt');\r\n    if (token) config.headers.Authorization = `Bearer ${token}`;\r\n\r\n    return config;\r\n}, error => {\r\n    return Promise.reject(error);\r\n})\r\n\r\naxios.interceptors.response.use(undefined, error => {\r\n    if (error.message === 'Network Error' && !error.response) {\r\n        toast.error('Network Error - Please, make sure API is running!')\r\n    }\r\n    const {status, data, config} = error.response;\r\n    if (status === 404) {\r\n        history.push('/notFound');\r\n    }\r\n    if (status === 400 && config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n        history.push('/notFound')\r\n    }\r\n    if (status === 500) {\r\n        toast.error('Server error - Please, check the terminal for more info!');\r\n    }\r\n    throw error.response;\r\n})\r\n\r\nconst responseBody = (response: AxiosResponse) => response ? response.data : [];\r\n\r\nconst sleep = (ms: number) => (response: AxiosResponse) => new Promise<AxiosResponse>(resolve => setTimeout(() => resolve(response), ms));\r\n\r\nconst request = {\r\n    get: (url: string) => axios.get(url, axiosConfig).then(sleep(1000)).then(responseBody),\r\n    post: (url: string, body: {}) => axios.post(url, body, axiosConfig).then(sleep(1000)).then(responseBody),\r\n    put: (url: string, body: {}) => axios.put(url, body, axiosConfig).then(sleep(1000)).then(responseBody),\r\n    del: (url: string) => axios.delete(url, axiosConfig).then(sleep(1000)).then(responseBody),\r\n    postForm: (url: string, file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post(url, formData, {\r\n            headers: {'Content-type': 'multipart/form-data'}\r\n        }).then(responseBody);\r\n    }\r\n\r\n}\r\n\r\nconst Activities = {\r\n    list: (): Promise<IActivity[]> => request.get('/activities/'),\r\n    details: (id: string) => request.get('/activities/' + id),\r\n    create: (activity: IActivity) => request.post('/activities/', activity),\r\n    update: (activity: IActivity) => request.put('/activities/' + activity.id, activity),\r\n    delete: (id: string) => request.del(`/activities/${id}`),\r\n    attendee: (id: string) => request.post(`/activities/${id}/attend`, {}),\r\n    unattend: (id: string) => request.del(`/activities/${id}/attend`),\r\n\r\n}\r\n\r\nconst User = {\r\n    current: (): Promise<IUser> => request.get('user/'),\r\n    login: (user: IUserFormValues): Promise<IUser> => request.post(`/user/login`, user),\r\n    register: (user: IUserFormValues): Promise<IUser> => request.post(`/user/register`, user)\r\n}\r\n\r\nconst Profiles = {\r\n    get: (username: string): Promise<IProfile> => request.get(`/profiles/${username}`),\r\n    uploadPhoto: (photo: Blob): Promise<IPhoto> => request.postForm(`/photos`, photo)\r\n}\r\n\r\n\r\nexport default {\r\n    Activities,\r\n    User,\r\n    Profiles\r\n};","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\layout\\LoadingComponent.tsx",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\stores\\activityStore.ts",["182","183"],"import {action, computed, configure, makeObservable, observable, runInAction} from \"mobx\";\r\nimport {SyntheticEvent} from \"react\";\r\nimport {IActivity, IAttendee} from \"../models/activity\";\r\nimport agent from \"../api/agent\";\r\nimport {v4 as uuid} from \"uuid\";\r\nimport {history} from \"../../index\";\r\nimport {toast} from \"react-toastify\";\r\nimport {RootStore} from \"./rootStore\";\r\nimport userStore from \"./userStore\";\r\nimport {createAttendee, setActivityProps} from \"../common/util/util\";\r\n\r\nexport default class ActivityStore {\r\n\r\n    rootStore: RootStore;\r\n\r\n    @observable activityRegistry = new Map();\r\n    @observable loadingInitial = false;\r\n    @observable activity: IActivity | null = null;\r\n    @observable submitting = false;\r\n    @observable target = '';\r\n    @observable loading = false;\r\n\r\n    @computed get activitiesByDates() {\r\n        return this.groupActivitiesByDates(Array.from(this.activityRegistry.values()));\r\n    }\r\n\r\n    groupActivitiesByDates(activities: IActivity[]) {\r\n        const sortedActivities = activities\r\n            .sort(\r\n                ((a, b) => a.date.getTime() - b.date.getTime())\r\n            )\r\n\r\n        return Object.entries(sortedActivities.reduce((activities, activity) => {\r\n            const date = activity.date.toISOString().split('T')[0];\r\n            activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n\r\n            return activities;\r\n        }, {} as { [key: string]: IActivity[] }));\r\n    }\r\n\r\n    constructor(rootStore: RootStore) {\r\n        makeObservable(this);\r\n        this.rootStore = rootStore\r\n    }\r\n\r\n    @action loadActivities = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const activities = await agent.Activities.list();\r\n            runInAction(() => {\r\n                activities.forEach(activity => {\r\n                    setActivityProps(activity, this.rootStore.userStore.user!);\r\n                    this.activityRegistry.set(activity.id, activity);\r\n                });\r\n                this.loadingInitial = false\r\n            });\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.loadingInitial = false\r\n            });\r\n        }\r\n    }\r\n\r\n    @action loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n        if (activity) {\r\n            this.activity = activity;\r\n            return activity;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                runInAction(() => {\r\n                    this.activity = setActivityProps(activity, this.rootStore.userStore.user!);\r\n                    this.activityRegistry.set(activity.id, activity);\r\n                    this.loadingInitial = false;\r\n                })\r\n                return activity;\r\n            } catch (error) {\r\n                runInAction(() => {\r\n                    this.loadingInitial = false;\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    @action clearActivity = () => {\r\n        this.activity = null;\r\n    }\r\n\r\n    getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n\r\n    @action createActivity = async (activity: IActivity) => {\r\n        this.submitting = true;\r\n        try {\r\n            activity.id = uuid();\r\n            await agent.Activities.create(activity);\r\n            const attendee = createAttendee(this.rootStore.userStore.user!);\r\n            attendee.isHost = true;\r\n            let attendees: IAttendee[] = [];\r\n            attendees.push(attendee);\r\n            activity.attendees = attendees;\r\n            activity.isHost = true;\r\n            runInAction(() => {\r\n                this.activityRegistry.set(activity.id, activity);\r\n                this.submitting = false;\r\n            })\r\n            history.push(`/activities/${activity.id}`)\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.submitting = false;\r\n            });\r\n            toast.error('Problem submitting data');\r\n            console.log(error.response);\r\n        }\r\n    }\r\n\r\n    @action deleteActivity = async (event: SyntheticEvent<HTMLButtonElement>, id: string) => {\r\n        this.submitting = true;\r\n        try {\r\n            this.target = event.currentTarget.name;\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n                this.submitting = false;\r\n                this.target = '';\r\n                this.activity = null;\r\n            });\r\n\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.submitting = false;\r\n                this.target = '';\r\n                this.activity = null;\r\n            });\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    @action editActivity = async (activity: IActivity) => {\r\n        this.submitting = true;\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                this.activityRegistry.set(activity.id, activity);\r\n                this.activity = activity;\r\n                this.submitting = false;\r\n            });\r\n            history.push(`/activities/${activity.id}`)\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.submitting = false;\r\n            });\r\n            toast.error('Problem submitting data');\r\n            console.log(error.response);\r\n        }\r\n    }\r\n\r\n    @action openEditForm = (id: string) => {\r\n        this.activity = this.activityRegistry.get(id);\r\n    }\r\n\r\n\r\n    @action openCreateForm = () => {\r\n        this.activity = null;\r\n    }\r\n\r\n    @action attendActivity = async () => {\r\n        const attendee = createAttendee(this.rootStore.userStore.user!);\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attendee(this.activity!.id);\r\n            runInAction(() => {\r\n                if (this.activity) {\r\n                    this.activity.attendees.push(attendee);\r\n                    this.activity.isGoing = true;\r\n                    this.activityRegistry.set(this.activity.id, this.activity);\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            });\r\n            toast.error('Problem signing up to activity')\r\n        }\r\n    }\r\n\r\n    @action cancelAttendance = async () => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.unattend(this.activity!.id);\r\n            runInAction(() => {\r\n                if (this.activity) {\r\n                    this.activity.attendees = this.activity.attendees.filter(a => a.username !== this.rootStore.userStore.user!.userName)\r\n\r\n                    this.activity.isGoing = false;\r\n                    this.activityRegistry.set(this.activity.id, this.activity);\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n            toast.error('Problem canceling attendence')\r\n        }\r\n    }\r\n}\r\n","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\home\\HomePage.tsx",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\layout\\ScrollToTop.tsx",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityListItem.tsx",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedHeader.tsx",["184"],"import React, {createContext, useContext} from 'react';\r\nimport {Button, Header, Image, Item, Segment} from \"semantic-ui-react\";\r\nimport {IActivity} from \"../../../app/models/activity\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {format} from 'date-fns';\r\nimport {RootStoreContext} from \"../../../app/stores/rootStore\";\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface IProps {\r\n    activity: IActivity;\r\n}\r\n\r\nconst ActivityDetailedHeader: React.FC<IProps> = ({activity}) => {\r\n\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {attendActivity, cancelAttendance, loading} = rootStore.activityStore;\r\n\r\n    const host = activity.attendees.filter(x => x.isHost)[0];\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{padding: '0'}}>\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle}/>\r\n                <Segment basic style={activityImageTextStyle}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{color: 'white'}}\r\n                                />\r\n                                <p>{format(activity.date, 'eeee do MMMM')}</p>\r\n                                <p>\r\n                                    Hosted by <Link to={`profile/${host.username}`}><strong>{host.displayName}</strong></Link>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <Button as={Link} to={`/manage/${activity.id}`} color='orange' floated='right'>\r\n                        Manage Event\r\n                    </Button>\r\n                ) : activity.isGoing ? (\r\n                    <Button loading={loading} onClick={cancelAttendance}>Cancel attendance</Button>\r\n                ) : (\r\n                    <Button loading={loading} onClick={attendActivity} color='teal'>Join Activity</Button>\r\n                )}\r\n\r\n            </Segment>\r\n        </Segment.Group>\r\n    );\r\n};\r\n\r\nexport default observer(ActivityDetailedHeader);\r\n","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedInfo.tsx",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedChat.tsx",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedSidebar.tsx",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\layout\\NotFound.tsx",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\common\\form\\TextInput.tsx",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\common\\form\\TextAreaInput.tsx",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\common\\form\\SelectInput.tsx",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\common\\form\\DateInput.tsx",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\common\\options\\categoryOptions.ts",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\common\\util\\util.ts",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\user\\LoginForm.tsx",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\stores\\rootStore.ts",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\models\\activity.ts",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\stores\\userStore.ts",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\stores\\commonStore.ts",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\common\\modals\\ModalContainer.tsx",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\stores\\modalStore.ts",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\common\\form\\ErrorMessage.tsx",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\user\\RegisterForm.tsx",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityListItemAttendees.tsx",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\profiles\\ProfilePage.tsx",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\profiles\\ProfileHeader.tsx",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\profiles\\ProfileContent.tsx",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\stores\\profileStore.ts",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\profiles\\ProfilePhotos.tsx",["185","186"],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\common\\photoUpload\\PhotoUploadWidget.tsx",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\common\\photoUpload\\PhotoWidgetDropzone.tsx",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\common\\photoUpload\\PhotoWidgetCropper.tsx",["187"],"import React, {FC, Props, useRef, useState} from 'react';\r\nimport \"cropperjs/dist/cropper.css\";\r\nimport {Cropper} from 'react-cropper';\r\n\r\ninterface IProps {\r\n    setImage: (file: Blob) => void;\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nconst PhotoWidgetCropper: FC<IProps> = ({setImage, imagePreview, setCropper}) => {\r\n        // const [cropper, setCropper] = useState<Cropper>();\r\n        // const cropper = useRef<Cropper>(null);\r\n        // const cropperRef = useRef<HTMLImageElement>(null);\r\n\r\n        // function cropImage() {\r\n        //     // if (cropper && cropper.current) {\r\n        //     //     cropper.current.getCroppedCanvas().toBlob((blob: any) => {\r\n        //     //         setImage(blob);\r\n        //     //     }, 'image/blob');\r\n        //\r\n        //     const imageElement: any = cropperRef?.current;\r\n        //     const cropper: any = imageElement?.cropper;\r\n        //     cropper.getCroppedCanvas().toBlob((blob: any) => {\r\n        //         setImage(blob);\r\n        //     }, 'image/blob');\r\n        //\r\n        // }\r\n\r\n        return (\r\n            <Cropper\r\n                // ref={cropper}\r\n                src={imagePreview}\r\n                style={{height: 200, width: '100%'}}\r\n                // @ts-ignore\r\n                initialAspectRatio={1}\r\n                aspectRatio={1}\r\n                preview='.img-preview'\r\n                guides={false}\r\n                viewMode={1}\r\n                autoCropArea={1}\r\n                background={false}\r\n                onInitialized={cropper => setCropper(cropper)}\r\n            />\r\n        );\r\n    }\r\n;\r\n\r\nexport default PhotoWidgetCropper;\r\n",{"ruleId":"188","replacedBy":"189"},{"ruleId":"190","replacedBy":"191"},{"ruleId":"192","severity":1,"message":"193","line":85,"column":1,"nodeType":"194","endLine":89,"endColumn":3},{"ruleId":"195","severity":1,"message":"196","line":1,"column":27,"nodeType":"197","messageId":"198","endLine":1,"endColumn":36},{"ruleId":"195","severity":1,"message":"199","line":9,"column":8,"nodeType":"197","messageId":"198","endLine":9,"endColumn":17},{"ruleId":"195","severity":1,"message":"200","line":1,"column":16,"nodeType":"197","messageId":"198","endLine":1,"endColumn":29},{"ruleId":"201","severity":1,"message":"202","line":46,"column":68,"nodeType":"203","messageId":"204","endLine":46,"endColumn":70},{"ruleId":"201","severity":1,"message":"202","line":59,"column":74,"nodeType":"203","messageId":"204","endLine":59,"endColumn":76},{"ruleId":"195","severity":1,"message":"205","line":1,"column":28,"nodeType":"197","messageId":"198","endLine":1,"endColumn":36},"no-native-reassign",["206"],"no-negated-in-lhs",["207"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","@typescript-eslint/no-unused-vars","'configure' is defined but never used.","Identifier","unusedVar","'userStore' is defined but never used.","'createContext' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]