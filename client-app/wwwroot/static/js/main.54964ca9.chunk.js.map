{"version":3,"sources":["app/api/agent.ts","app/common/util/util.ts","app/stores/activityStore.ts","app/stores/userStore.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/profileStore.ts","app/stores/rootStore.ts","features/nav/navbar.tsx","app/common/form/TextInput.tsx","app/common/form/ErrorMessage.tsx","features/user/LoginForm.tsx","features/user/RegisterForm.tsx","features/home/HomePage.tsx","features/activities/dashboard/ActivityListItemAttendees.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityFilters.tsx","features/activities/dashboard/ActivityListItemPlaceHolder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/models/activity.ts","app/common/form/TextAreaInput.tsx","app/common/form/SelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/DateInput.tsx","features/activities/form/ActivityForm.tsx","app/layout/LoadingComponent.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","app/layout/NotFound.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileHeader.tsx","app/common/photoUpload/PhotoWidgetDropzone.tsx","app/common/photoUpload/PhotoWidgetCropper.tsx","app/common/photoUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileCard.tsx","features/profiles/ProfileFollowings.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["axios","defaults","baseURL","process","axiosConfig","headers","interceptors","request","use","config","token","window","localStorage","getItem","Authorization","error","Promise","reject","response","undefined","message","toast","status","data","history","push","includes","removeItem","info","method","errors","hasOwnProperty","responseBody","url","get","then","body","post","put","delete","file","formData","FormData","append","list","params","details","id","create","activity","update","attendee","unattend","current","login","user","register","username","uploadPhoto","photo","setMainPhoto","deletePhoto","updateProfile","profile","follow","unfollow","listFollowings","predicate","listActivities","setActivityProps","date","Date","isGoing","attendees","some","a","userName","isHost","createAttendee","displayName","image","ActivityStore","observable","ref","rootStore","getActivity","activityRegistry","makeObservable","this","reaction","keys","page","clear","loadActivities","activities","sortedActivities","sort","b","getTime","Object","entries","reduce","toISOString","split","URLSearchParams","String","forEach","value","key","Math","ceil","activityCount","groupActivitiesByDates","Array","from","values","Map","action","set","computed","activityId","hubConnection","HubConnectionBuilder","withUrl","toString","accessTokenFactory","commonStore","configureLogging","LogLevel","Information","withAutomaticReconnect","build","state","start","console","log","invoke","catch","on","comment","runInAction","comments","stop","err","loadingInitial","agent","axiosParams","activitiesEnvelope","userStore","submitting","uuid","event","target","currentTarget","name","loading","filter","UserStore","setToken","modalStore","closeModal","CommonStore","setItem","appLoaded","ModalStore","shallow","open","content","modal","ProfileStore","activeTab","loadFollowings","followings","loadingActivities","userActivities","activeIndex","loadingProfile","updatedProfile","uploadingPhoto","photos","isMain","find","following","followersCount","configure","enforceActions","RootStoreContext","createContext","activityStore","profileStore","observer","useContext","logout","Menu","fixed","inverted","Container","Item","header","as","NavLink","exact","to","src","alt","style","marginRight","Button","onClick","openCreateForm","type","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","TextInput","input","width","placeholder","meta","touched","FormField","Label","basic","color","ErrorMessage","Message","Header","statusText","length","List","flat","map","i","Content","validator","combineValidators","email","isRequired","password","LoginForm","onSubmit","FORM_ERROR","validate","render","handleSubmit","submitError","form","invalid","pristine","dirtySinceLastSubmit","Form","textAlign","component","disabled","fluid","displayname","RegisterForm","HomePage","isLoggedIn","openModal","Segment","vertical","className","size","marginBottom","styles","borderColor","borderWidth","ActivityListItemAttendees","horizontal","Popup","trigger","bordered","circular","ActivityListItem","deleteActivity","host","x","Group","ItemGroup","title","Description","Icon","format","venue","city","secondary","clearing","description","floated","e","activitiesByDates","group","divided","setPredicate","marginTop","attached","active","has","onChange","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","setPage","totalPages","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","hasMore","initialLoad","Loader","ActivityFormValues","init","category","time","assign","TextAreaInput","rows","SelectInput","options","Select","DateInput","rest","onBlur","onKeyDown","preventDefault","composeValidators","hasLengthGreaterThan","match","loadActivity","createActivity","editActivity","setActivity","setLoading","finally","GridColumn","initialValues","dateAndTime","timeString","getHours","getMinutes","year","getFullYear","month","getMonth","day","getDate","dateString","combineDateAndTime","newActivity","FormGroup","widths","LoadingComponent","Dimmer","activityImageStyle","activityImageTextStyle","bottom","left","height","attendActivity","cancelAttendance","padding","verticalAlign","createHubConnection","stopHubConnection","addComment","border","CommentGroup","Comment","Avatar","Author","Metadata","formatDistance","createdAt","Text","reset","labelPosition","primary","relaxed","ribbon","Extra","NotFound","Inline","Modal","onClose","onOpen","isCurrentUser","Statistic","label","followingCount","Divider","Reveal","animated","visible","hidden","dropZoneStyles","borderRadius","paddingTop","dropZoneActive","PhotoWidgetDropzone","setFiles","onDrop","useCallback","acceptedFiles","preview","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoUploadWidget","setAddPhotoMode","files","revokeObjectURL","Row","sub","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setTarget","deleteTarget","setDeleteTarget","Tab","Pane","paddingBottom","Card","itemsPerRow","ButtonGroup","negative","updateMode","setUpdateMode","fo","bio","initialValue","extra","panes","menuItem","pane","loadUserActivities","menu","onTabChange","handleTabChange","objectFit","Meta","ProfileActivities","ProfileContent","setActiveTab","menuPosition","loadProfile","Component","props","withRouter","location","setAppLoaded","getUser","path","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","useLocation","scrollTo","dateFnsLocalizer","createBrowserHistory","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.54964ca9.chunk.js","sourcesContent":["import axios, {AxiosResponse} from 'axios';\r\nimport {IActivitiesEnvelope, IActivity} from \"../models/activity\";\r\nimport {history} from \"../../index\";\r\nimport {toast} from \"react-toastify\";\r\nimport {IUser, IUserFormValues} from \"../models/User\";\r\nimport {IPhoto, IProfile, IProfileFormValues} from \"../models/Profile\";\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\nconst axiosConfig = {\r\n    headers: {\r\n        'Content-Type': 'application/json; charset=UTF-8',\r\n        \"Access-Control-Allow-Origin\": \"*\"\r\n    }\r\n};\r\n\r\naxios.interceptors.request.use((config) => {\r\n    const token = window.localStorage.getItem('jwt');\r\n    if (token) config.headers.Authorization = `Bearer ${token}`;\r\n\r\n    return config;\r\n}, error => {\r\n    return Promise.reject(error);\r\n})\r\n\r\naxios.interceptors.response.use(undefined, error => {\r\n    if (error.message === 'Network Error' && !error.response) {\r\n        toast.error('Network Error - Please, make sure API is running!')\r\n    }\r\n    const {status, data, config, headers} = error.response;\r\n    if (status === 404) {\r\n        history.push('/notFound');\r\n    }\r\n    if (status === 401 && headers['www-authenticate'].includes('Bearer error=\"invalid_token\", error_description=\"The token expired')){\r\n        window.localStorage.removeItem('jwt');\r\n        history.push('/');\r\n        toast.info('Your session has expired, please login again');\r\n    }\r\n    if (status === 400 && config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n        history.push('/notFound')\r\n    }\r\n    if (status === 500) {\r\n        toast.error('Server error - Please, check the terminal for more info!');\r\n    }\r\n    throw error.response;\r\n})\r\n\r\nconst responseBody = (response: AxiosResponse) => response ? response.data : [];\r\n\r\nconst sleep = (ms: number) => (response: AxiosResponse) => new Promise<AxiosResponse>(resolve => setTimeout(() => resolve(response), ms));\r\n\r\nconst request = {\r\n    get: (url: string) => axios.get(url, axiosConfig).then(responseBody),\r\n    post: (url: string, body: {}) => axios.post(url, body, axiosConfig).then(responseBody),\r\n    put: (url: string, body: {}) => axios.put(url, body, axiosConfig).then(responseBody),\r\n    del: (url: string) => axios.delete(url, axiosConfig).then(responseBody),\r\n    postForm: (url: string, file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post(url, formData, {\r\n            headers: {'Content-type': 'multipart/form-data'}\r\n        }).then(responseBody);\r\n    }\r\n\r\n}\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams): Promise<IActivitiesEnvelope> => axios.get('/activities', {params: params}).then(responseBody),\r\n    details: (id: string) => request.get('/activities/' + id),\r\n    create: (activity: IActivity) => request.post('/activities/', activity),\r\n    update: (activity: IActivity) => request.put('/activities/' + activity.id, activity),\r\n    delete: (id: string) => request.del(`/activities/${id}`),\r\n    attendee: (id: string) => request.post(`/activities/${id}/attend`, {}),\r\n    unattend: (id: string) => request.del(`/activities/${id}/attend`),\r\n\r\n}\r\n\r\nconst User = {\r\n    current: (): Promise<IUser> => request.get('user/'),\r\n    login: (user: IUserFormValues): Promise<IUser> => request.post(`/user/login`, user),\r\n    register: (user: IUserFormValues): Promise<IUser> => request.post(`/user/register`, user)\r\n}\r\n\r\nconst Profiles = {\r\n    get: (username: string): Promise<IProfile> => request.get(`/profiles/${username}`),\r\n    uploadPhoto: (photo: Blob): Promise<IPhoto> => request.postForm(`/photos`, photo),\r\n    setMainPhoto: (id: string) => request.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id: string) => request.del(`/photos/${id}`),\r\n    updateProfile: (profile: IProfileFormValues): Promise<IProfile> => request.put(`/profiles`, profile),\r\n    follow: (username: string) => request.post(`/profiles/${username}/follow`, {}),\r\n    unfollow: (username: string) => request.del(`/profiles/${username}/follow`),\r\n    listFollowings: (username: string, predicate: string) => request.get(`/profiles/${username}/follow?predicate=${predicate}`),\r\n    listActivities: (username: string, predicate: string) => request.get(`/profiles/${username}/activities?predicate=${predicate}`),\r\n\r\n}\r\n\r\n\r\nexport default {\r\n    Activities,\r\n    User,\r\n    Profiles\r\n};","import {IActivity, IAttendee} from \"../../models/activity\";\r\nimport {IUser} from \"../../models/User\";\r\n\r\nexport const combineDateAndTime = (date: Date, time: Date) => {\r\n    const timeString = time.getHours() + ':' + time.getMinutes() + ':00'\r\n\r\n    const year = date.getFullYear();\r\n    const month = date.getMonth() + 1;\r\n    const day = date.getDate();\r\n    const dateString = `${year}-${month}-${day}`;\r\n\r\n    return new Date(dateString + ' ' + timeString);\r\n}\r\n\r\nexport const setActivityProps = (activity: IActivity, user: IUser) => {\r\n    activity.date = new Date(activity.date);\r\n    activity.isGoing = activity.attendees.some(a => a.username === user.userName);\r\n    activity.isHost = activity.attendees.some(a => a.username === user.userName && a.isHost);\r\n    return activity;\r\n}\r\n\r\nexport const createAttendee = (user: IUser): IAttendee => {\r\n\r\n    return {\r\n        displayName: user.displayName,\r\n        isHost: false,\r\n        username: user.userName,\r\n        image: user.image!\r\n    }\r\n\r\n}\r\n\r\n","import {action, computed, makeObservable, observable, reaction, runInAction} from \"mobx\";\r\nimport {SyntheticEvent} from \"react\";\r\nimport {IActivity, IAttendee} from \"../models/activity\";\r\nimport agent from \"../api/agent\";\r\nimport {v4 as uuid} from \"uuid\";\r\nimport {history} from \"../../index\";\r\nimport {toast} from \"react-toastify\";\r\nimport {RootStore} from \"./rootStore\";\r\nimport {createAttendee, setActivityProps} from \"../common/util/util\";\r\nimport {HubConnection, HubConnectionBuilder, LogLevel} from \"@microsoft/signalr\";\r\n\r\nconst LIMIT = 2;\r\n\r\nexport default class ActivityStore {\r\n\r\n    rootStore: RootStore;\r\n\r\n    @observable activityRegistry = new Map();\r\n    @observable loadingInitial = false;\r\n    @observable activity: IActivity | null = null;\r\n    @observable submitting = false;\r\n    @observable target = '';\r\n    @observable loading = false\r\n    @observable.ref hubConnection: HubConnection | null = null;\r\n    @observable activityCount = 0\r\n    @observable page = 0\r\n    @observable predicate = new Map();\r\n\r\n    constructor(rootStore: RootStore) {\r\n        makeObservable(this);\r\n        this.rootStore = rootStore\r\n\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.page = 0;\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            })\r\n    }\r\n\r\n    @action setPredicate = (predicate: string, values: string | Date) => {\r\n        this.predicate.clear();\r\n        if (predicate !== 'all') {\r\n            this.predicate.set(predicate, values);\r\n        }\r\n    }\r\n\r\n    @computed get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('limit', String(LIMIT));\r\n        params.append('offset', `${this.page ? this.page * LIMIT : 0}`);\r\n        this.predicate.forEach((value, key) => {\r\n            if (key === 'startDate') {\r\n                params.append(key, value.toISOString());\r\n            } else {\r\n                params.append(key, value);\r\n            }\r\n        });\r\n        return params;\r\n    }\r\n\r\n    @computed get totalPages() {\r\n        return Math.ceil(this.activityCount / LIMIT);\r\n    }\r\n\r\n    @action setPage = (page: number) => {\r\n        this.page = page;\r\n    }\r\n\r\n    @action createHubConnection = (activityId: string) => {\r\n        this.hubConnection = new HubConnectionBuilder()\r\n            .withUrl(process.env.REACT_APP_API_CHAT_URL!.toString(), {\r\n                accessTokenFactory: () => this.rootStore.commonStore.token!\r\n            })\r\n            .configureLogging(LogLevel.Information)\r\n            .withAutomaticReconnect()\r\n            .build();\r\n\r\n        if (this.hubConnection.state === 'Disconnected') {\r\n            this.hubConnection\r\n                .start()\r\n                .then(() => console.log(this.hubConnection!.state))\r\n                .then(() => {\r\n                    if (this.hubConnection?.state === \"Connected\") {\r\n                        console.log('Attempting to join group');\r\n                        this.hubConnection?.invoke('AddToGroup', activityId);\r\n                    }\r\n                })\r\n                .catch((error) =>\r\n                    console.log('Error establishing connection: ', error)\r\n                );\r\n        }\r\n\r\n        this.hubConnection.on('ReceiveComment', comment => {\r\n            runInAction(() => {\r\n                this.activity!.comments.push(comment);\r\n            })\r\n        });\r\n\r\n        this.hubConnection.on('Send', message => {\r\n            toast.info(message);\r\n        })\r\n    };\r\n\r\n    @action stopHubConnection = () => {\r\n        if (this.hubConnection?.state === \"Connected\") {\r\n            this.hubConnection!.invoke(\"RemoveFromGroup\", this.activity!.id)\r\n                .then(() => {\r\n                    this.hubConnection!.stop();\r\n                })\r\n                .then(() => console.log(\"Connection stopped\"))\r\n                .catch((err) => console.log(\"error\", err));\r\n        }\r\n    };\r\n\r\n    @action addComment = async (values: any) => {\r\n        if (this.hubConnection?.state === \"Connected\") {\r\n\r\n            values.activityId = this.activity!.id;\r\n\r\n            try {\r\n                await this.hubConnection!.invoke('SendComment', values);\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    @computed get activitiesByDates() {\r\n        return this.groupActivitiesByDates(Array.from(this.activityRegistry.values()));\r\n    }\r\n\r\n    groupActivitiesByDates(activities\r\n                               :\r\n                               IActivity[]\r\n    ) {\r\n        const sortedActivities = activities\r\n            .sort(\r\n                ((a, b) => a.date.getTime() - b.date.getTime())\r\n            )\r\n\r\n        return Object.entries(sortedActivities.reduce((activities, activity) => {\r\n            const date = activity.date.toISOString().split('T')[0];\r\n            activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n\r\n            return activities;\r\n        }, {} as { [key: string]: IActivity[] }));\r\n    }\r\n\r\n    @action\r\n    loadActivities = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const activitiesEnvelope = await agent.Activities.list(this.axiosParams);\r\n            const {activities, activityCount} = activitiesEnvelope;\r\n            runInAction(() => {\r\n                activities.forEach(activity => {\r\n                    setActivityProps(activity, this.rootStore.userStore.user!);\r\n                    this.activityRegistry.set(activity.id, activity);\r\n                });\r\n                this.activityCount = activityCount;\r\n                this.loadingInitial = false\r\n            });\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.loadingInitial = false\r\n            });\r\n        }\r\n    }\r\n\r\n    @action\r\n    loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n        if (activity) {\r\n            this.activity = activity;\r\n            return activity;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                runInAction(() => {\r\n                    this.activity = setActivityProps(activity, this.rootStore.userStore.user!);\r\n                    this.activityRegistry.set(activity.id, activity);\r\n                    this.loadingInitial = false;\r\n                })\r\n                return activity;\r\n            } catch (error) {\r\n                runInAction(() => {\r\n                    this.loadingInitial = false;\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    @action\r\n    clearActivity = () => {\r\n        this.activity = null;\r\n    }\r\n\r\n    getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n\r\n    @action\r\n    createActivity = async (activity: IActivity) => {\r\n        this.submitting = true;\r\n        try {\r\n            activity.id = uuid();\r\n            await agent.Activities.create(activity);\r\n            const attendee = createAttendee(this.rootStore.userStore.user!);\r\n            attendee.isHost = true;\r\n            let attendees: IAttendee[] = [];\r\n            attendees.push(attendee);\r\n            activity.attendees = attendees;\r\n            activity.comments = [];\r\n            activity.isHost = true;\r\n            runInAction(() => {\r\n                this.activityRegistry.set(activity.id, activity);\r\n                this.submitting = false;\r\n            })\r\n            history.push(`/activities/${activity.id}`)\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.submitting = false;\r\n            });\r\n            toast.error('Problem submitting data');\r\n            console.log(error.response);\r\n        }\r\n    }\r\n\r\n    @action\r\n    deleteActivity = async (event: SyntheticEvent<HTMLButtonElement>, id: string) => {\r\n        this.submitting = true;\r\n        try {\r\n            this.target = event.currentTarget.name;\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n                this.submitting = false;\r\n                this.target = '';\r\n                this.activity = null;\r\n            });\r\n\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.submitting = false;\r\n                this.target = '';\r\n                this.activity = null;\r\n            });\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    @action\r\n    editActivity = async (activity: IActivity) => {\r\n        this.submitting = true;\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                this.activityRegistry.set(activity.id, activity);\r\n                this.activity = activity;\r\n                this.submitting = false;\r\n            });\r\n            history.push(`/activities/${activity.id}`)\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.submitting = false;\r\n            });\r\n            toast.error('Problem submitting data');\r\n            console.log(error.response);\r\n        }\r\n    }\r\n\r\n    @action\r\n    openEditForm = (id: string) => {\r\n        this.activity = this.activityRegistry.get(id);\r\n    }\r\n\r\n\r\n    @action\r\n    openCreateForm = () => {\r\n        this.activity = null;\r\n    }\r\n\r\n    @action\r\n    attendActivity = async () => {\r\n        const attendee = createAttendee(this.rootStore.userStore.user!);\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attendee(this.activity!.id);\r\n            runInAction(() => {\r\n                if (this.activity) {\r\n                    this.activity.attendees.push(attendee);\r\n                    this.activity.isGoing = true;\r\n                    this.activityRegistry.set(this.activity.id, this.activity);\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            });\r\n            toast.error('Problem signing up to activity')\r\n        }\r\n    }\r\n\r\n    @action\r\n    cancelAttendance = async () => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.unattend(this.activity!.id);\r\n            runInAction(() => {\r\n                if (this.activity) {\r\n                    this.activity.attendees = this.activity.attendees.filter(a => a.username !== this.rootStore.userStore.user!.userName)\r\n\r\n                    this.activity.isGoing = false;\r\n                    this.activityRegistry.set(this.activity.id, this.activity);\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n            toast.error('Problem canceling attendence')\r\n        }\r\n    }\r\n}\r\n","import {action, computed, makeObservable, observable, runInAction} from \"mobx\";\r\nimport {IUser, IUserFormValues} from \"../models/User\";\r\nimport agent from \"../api/agent\";\r\nimport {RootStore} from \"./rootStore\";\r\nimport {history} from \"../../index\";\r\n\r\nexport default class UserStore {\r\n    rootStore: RootStore;\r\n\r\n    constructor(rootStore: RootStore) {\r\n        makeObservable(this);\r\n        this.rootStore = rootStore\r\n    }\r\n\r\n    @observable user: IUser | null = null;\r\n\r\n    @computed get isLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n\r\n    @action login = async (values: IUserFormValues) => {\r\n        try {\r\n            const user = await agent.User.login(values);\r\n            runInAction(() => {\r\n                this.user = user;\r\n\r\n            })\r\n            this.rootStore.commonStore.setToken(user.token);\r\n            history.push('/activities')\r\n            this.rootStore.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    @action register = async (values: IUserFormValues) => {\r\n        try {\r\n            const user = await agent.User.register(values);\r\n            runInAction(() => {\r\n                this.user = user;\r\n\r\n            })\r\n            this.rootStore.commonStore.setToken(user.token);\r\n            this.rootStore.modalStore.closeModal();\r\n            history.push('/activities')\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    @action getUser = async () => {\r\n        try {\r\n            const user = await agent.User.current();\r\n            runInAction(() => {\r\n                this.user = user;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    @action logout = async () => {\r\n        this.rootStore.commonStore.setToken(null);\r\n        this.user = null;\r\n        history.push('/')\r\n    }\r\n}","import {RootStore} from \"./rootStore\";\r\nimport {action, makeObservable, observable, reaction} from \"mobx\";\r\n\r\nexport default class CommonStore {\r\n    rootStore: RootStore;\r\n\r\n    constructor(rootStore: RootStore) {\r\n        makeObservable(this);\r\n        this.rootStore = rootStore;\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if (token) {\r\n                    window.localStorage.setItem('jwt', token);\r\n                } else {\r\n                    window.localStorage.removeItem('jwt');\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    @observable token: string | null = window.localStorage.getItem('jwt');\r\n    @observable appLoaded = false;\r\n\r\n    @action setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    @action setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import {RootStore} from \"./rootStore\";\r\nimport {action, makeObservable, observable} from \"mobx\";\r\n\r\nexport default class ModalStore {\r\n    rootStore: RootStore;\r\n\r\n    constructor(rootStore: RootStore) {\r\n        makeObservable(this);\r\n        this.rootStore = rootStore;\r\n    }\r\n\r\n    @observable.shallow modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    @action openModal = (content: any) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    @action closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n\r\n}\r\n\r\n","import {RootStore} from \"./rootStore\";\r\nimport {action, computed, makeObservable, observable, reaction, runInAction} from \"mobx\";\r\nimport {IPhoto, IProfile, IProfileFormValues, IUserActivity} from \"../models/Profile\";\r\nimport agent from \"../api/agent\";\r\nimport {toast} from \"react-toastify\";\r\n\r\nexport default class ProfileStore {\r\n    rootStore: RootStore;\r\n\r\n    constructor(rootStore: RootStore) {\r\n        makeObservable(this);\r\n        this.rootStore = rootStore;\r\n\r\n        reaction(\r\n            () => this.activeTab,\r\n            activeTab => {\r\n                if (activeTab === 3 || activeTab === 4) {\r\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\r\n                    this.loadFollowings(predicate);\r\n                } else {\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    @observable profile: IProfile | null = null;\r\n    @observable loadingProfile = false;\r\n    @observable uploadingPhoto = false;\r\n    @observable loading = false;\r\n    @observable followings: IProfile[] = [];\r\n    @observable activeTab: number = 0;\r\n    @observable userActivities: IUserActivity[] = [];\r\n    @observable loadingActivities = false;\r\n\r\n    @computed get isCurrentUser() {\r\n        if (this.rootStore.userStore.user && this.profile) {\r\n            return this.rootStore.userStore.user.userName === this.profile.userName;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    @action loadUserActivities = async (username: string, predicate?: string) => {\r\n        this.loadingActivities = true;\r\n        try {\r\n            const activities = await agent.Profiles.listActivities(username, predicate!);\r\n            runInAction(() => {\r\n                this.userActivities = activities;\r\n                this.loadingActivities = false;\r\n            });\r\n        } catch (error) {\r\n            toast.error('Problem loading activities');\r\n            runInAction(() => {\r\n                this.loadingActivities = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    @action setActiveTab = (activeIndex: number) => {\r\n        this.activeTab = activeIndex;\r\n    }\r\n\r\n    @action loadProfile = async (username: string) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            })\r\n        } catch (error) {\r\n            this.loadingProfile = false;\r\n            console.log(error);\r\n\r\n        }\r\n    }\r\n\r\n    @action updateProfile = async (profile: IProfileFormValues) => {\r\n        console.log(profile.displayName);\r\n        // if (profile.displayName == this.profile?.displayName && profile.bio == this.profile?.bio){\r\n        //     console.log(this.profile!.displayName);\r\n        //     return;\r\n        // }\r\n        try {\r\n            const updatedProfile = await agent.Profiles.updateProfile(profile);\r\n            runInAction(() => {\r\n                this.profile = updatedProfile;\r\n                this.rootStore.userStore.user!.displayName = updatedProfile.displayName;\r\n            });\r\n        } catch (error) {\r\n            toast.error('Problems to update profile')\r\n        }\r\n    }\r\n\r\n    @action uploadPhoto = async (file: Blob) => {\r\n        this.uploadingPhoto = true;\r\n        try {\r\n            const photo = await agent.Profiles.uploadPhoto(file);\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos.push(photo);\r\n                    if (photo.isMain && this.rootStore.userStore.user) {\r\n                        this.rootStore.userStore.user.image = photo.url;\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n                this.uploadingPhoto = false;\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n            toast.error('Problem uploading photo')\r\n            runInAction(() => {\r\n                this.uploadingPhoto = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    @action setMainPhoto = async (photo: IPhoto) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            runInAction(() => {\r\n                this.rootStore.userStore.user!.image = photo.url;\r\n                this.profile!.photos.find(a => a.isMain)!.isMain = false;\r\n                this.profile!.photos.find(a => a.id === photo.id)!.isMain = true;\r\n                this.profile!.image = photo.url;\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            toast.error('Problem setting photo as main');\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    @action deletePhoto = async (photo: IPhoto) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n            runInAction(() => {\r\n                this.profile!.photos = this.profile!.photos.filter(a => a.id !== photo.id);\r\n                this.loading = false\r\n            });\r\n        } catch (error) {\r\n            toast.error('Problem deleting the photo')\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    @action follow = async (username: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.follow(username);\r\n            runInAction(() => {\r\n                this.profile!.following = true;\r\n                this.profile!.followersCount++;\r\n                this.loading = false;\r\n            });\r\n\r\n        } catch (error) {\r\n            console.log('problem following user');\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            });\r\n        }\r\n    }\r\n\r\n    @action unfollow = async (username: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.unfollow(username);\r\n            runInAction(() => {\r\n                this.profile!.following = false;\r\n                this.profile!.followersCount--;\r\n                this.loading = false;\r\n            });\r\n\r\n        } catch (error) {\r\n            console.log('problem unfollowing user');\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            });\r\n        }\r\n    }\r\n\r\n    @action loadFollowings = async (predicate: string) => {\r\n        this.loading = true;\r\n        try {\r\n            const response = await agent.Profiles.listFollowings(this.profile!.userName, predicate);\r\n            runInAction(() => {\r\n                this.followings = response;\r\n                this.loading = false;\r\n            });\r\n        } catch (error) {\r\n            toast.error('Problem loading followings');\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            });\r\n        }\r\n    }\r\n\r\n}","import ActivityStore from \"./activityStore\";\r\nimport UserStore from \"./userStore\";\r\nimport {createContext} from \"react\";\r\nimport {configure} from \"mobx\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./profileStore\";\r\n\r\nconfigure({enforceActions: \"always\"});\r\n\r\nexport class RootStore {\r\n    activityStore: ActivityStore;\r\n    userStore: UserStore;\r\n    commonStore: CommonStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n\r\n    constructor() {\r\n        this.activityStore = new ActivityStore(this);\r\n        this.userStore = new UserStore(this);\r\n        this.commonStore = new CommonStore(this);\r\n        this.modalStore = new ModalStore(this);\r\n        this.profileStore = new ProfileStore(this);\r\n    }\r\n}\r\n\r\nexport const RootStoreContext = createContext(new RootStore())\r\n\r\n","import React, {FC, useContext} from 'react';\r\nimport {Button, Container, Dropdown, Image, Menu} from \"semantic-ui-react\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {Link, NavLink} from \"react-router-dom\";\r\nimport {RootStoreContext} from \"../../app/stores/rootStore\";\r\n\r\n\r\nconst Navbar: FC = () => {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {user, logout} = rootStore.userStore;\r\n    return (\r\n        <Menu fixed={\"top\"} inverted>\r\n            <Container>\r\n                <Menu.Item header as={NavLink} exact to='/'>\r\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{marginRight: '10px'}}></img>\r\n                    Reactivities\r\n                </Menu.Item>\r\n                <Menu.Item name='Activities' as={NavLink} to='/activities'/>\r\n                <Menu.Item>\r\n                    <Button onClick={rootStore.activityStore.openCreateForm} type=\"button\" positive as={NavLink}\r\n                            to='/createActivity'\r\n                            content='Create Activity'></Button>\r\n                </Menu.Item>\r\n                {user &&\r\n                <Menu.Item position='right'>\r\n                    <Image avatar spaced='right' src={user.image || '/assets/user.png'}/>\r\n                    <Dropdown pointing='top left' text={user.displayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item\r\n                                as={Link}\r\n                                to={`/profile/${user.userName}`}\r\n                                text='My profile'\r\n                                icon='user'/>\r\n                            <Dropdown.Item text='Logout' icon='power' onClick={logout}/>\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n                }\r\n            </Container>\r\n        </Menu>\r\n    );\r\n};\r\n\r\nexport default observer(Navbar)","import React from 'react';\r\nimport {FieldRenderProps} from \"react-final-form\";\r\nimport {FormField, FormFieldProps, Label} from \"semantic-ui-react\";\r\n\r\ninterface IProps extends FieldRenderProps<string, HTMLInputElement | HTMLElement>, FormFieldProps {\r\n\r\n}\r\n\r\nconst TextInput: React.FC<IProps> = ({\r\n                                         input,\r\n                                         width,\r\n                                         placeholder,\r\n                                         meta: {touched, error}\r\n                                     }) => {\r\n    return <FormField error={touched && !!error}>\r\n        <input {...input}\r\n               placeholder={placeholder}\r\n               width={width}\r\n        />\r\n        <br/>\r\n        {touched && error && (\r\n\r\n            <Label basic color={\"red\"}>\r\n                {error}\r\n            </Label>\r\n        )}\r\n    </FormField>\r\n};\r\n\r\nexport default TextInput;\r\n","import React from 'react';\r\nimport {AxiosResponse} from \"axios\";\r\nimport {Message} from \"semantic-ui-react\";\r\n\r\ninterface IProps {\r\n    error: AxiosResponse,\r\n    text?   : string\r\n}\r\n\r\nconst ErrorMessage: React.FC<IProps> = ({error, text}) => {\r\n    return (\r\n        <Message error>\r\n            <Message.Header>{error.statusText}</Message.Header>\r\n            {error && error.data && Object.keys(error.data.errors).length > 0 && (\r\n                <Message.List>\r\n                    {Object.values(error.data.errors).flat().map((err: any, i) => (\r\n                        <Message.Item key={i}>{err}</Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n            {text && <Message.Content content={text}/>}\r\n        </Message>\r\n    );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import React, {useContext} from 'react';\r\nimport {Field, Form as FinalForm} from 'react-final-form';\r\nimport {Button, Form, Header} from \"semantic-ui-react\";\r\nimport TextInput from \"../../app/common/form/TextInput\";\r\nimport {RootStoreContext} from \"../../app/stores/rootStore\";\r\nimport {IUserFormValues} from \"../../app/models/User\";\r\nimport {FORM_ERROR} from \"final-form\";\r\nimport {combineValidators, isRequired} from \"revalidate\";\r\nimport ErrorMessage from \"../../app/common/form/ErrorMessage\";\r\n\r\nconst validator = combineValidators({\r\n    email: isRequired('email'),\r\n    password: isRequired('password')\r\n});\r\n\r\n\r\nconst LoginForm = () => {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {login} = rootStore.userStore;\r\n\r\n    return (\r\n        <FinalForm\r\n            onSubmit={(values: IUserFormValues) => login(values).catch(error => ({\r\n                [FORM_ERROR]: error\r\n            }))}\r\n            validate={validator}\r\n            render={({handleSubmit, submitting, form, submitError, invalid, pristine, dirtySinceLastSubmit}) => (\r\n                <Form onSubmit={handleSubmit} error>\r\n                    <Header\r\n                        as='h2'\r\n                        content='Login to Reactivities'\r\n                        color='teal'\r\n                        textAlign='center'\r\n                    />\r\n                    <Field name='email' component={TextInput} placeholder='Email'/>\r\n                    <Field name='password' type={'password'} component={TextInput} placeholder='Password'/>\r\n                    {submitError && !dirtySinceLastSubmit &&\r\n                        <ErrorMessage error={submitError} text={'Invalid email or password'}/>\r\n                    }\r\n                    <Button disabled={(invalid && !dirtySinceLastSubmit) || pristine} loading={submitting} color='teal'\r\n                            content='Login' fluid/>\r\n                    {/*<pre>{JSON.stringify(form.getState(), null, 2)}</pre>*/}\r\n                </Form>\r\n            )}\r\n        />\r\n    );\r\n};\r\n\r\nexport default LoginForm;\r\n","import React, {useContext} from 'react';\r\nimport {Field, Form as FinalForm} from 'react-final-form';\r\nimport {Button, Form, Header} from \"semantic-ui-react\";\r\nimport TextInput from \"../../app/common/form/TextInput\";\r\nimport {RootStoreContext} from \"../../app/stores/rootStore\";\r\nimport {IUserFormValues} from \"../../app/models/User\";\r\nimport {FORM_ERROR} from \"final-form\";\r\nimport {combineValidators, isRequired} from \"revalidate\";\r\nimport ErrorMessage from \"../../app/common/form/ErrorMessage\";\r\n\r\nconst validator = combineValidators({\r\n    username: isRequired('username'),\r\n    displayname: isRequired('displayname'),\r\n    email: isRequired('email'),\r\n    password: isRequired('password')\r\n});\r\n\r\n\r\nconst RegisterForm = () => {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {register} = rootStore.userStore;\r\n\r\n    return (\r\n        <FinalForm\r\n            onSubmit={(values: IUserFormValues) => register(values).catch(error => ({\r\n                [FORM_ERROR]: error\r\n            }))}\r\n            validate={validator}\r\n            render={({handleSubmit, submitting, form, submitError, invalid, pristine, dirtySinceLastSubmit}) => (\r\n                <Form onSubmit={handleSubmit} error>\r\n                    <Header\r\n                        as='h2'\r\n                        content='Login to Reactivities'\r\n                        color='teal'\r\n                        textAlign='center'\r\n                    />\r\n                    <Field name='username' component={TextInput} placeholder='Username'/>\r\n                    <Field name='displayname' component={TextInput} placeholder='Display Name'/>\r\n                    <Field name='email' component={TextInput} placeholder='Email'/>\r\n                    <Field name='password' type={'password'} component={TextInput} placeholder='Password'/>\r\n                    {submitError && !dirtySinceLastSubmit &&\r\n                        <ErrorMessage\r\n                            error={submitError}\r\n                        />\r\n                    }\r\n                    <Button disabled={(invalid && !dirtySinceLastSubmit) || pristine} loading={submitting} color='teal'\r\n                            content='Login' fluid/>\r\n                    {/*<pre>{JSON.stringify(form.getState(), null, 2)}</pre>*/}\r\n                </Form>\r\n            )}\r\n        />\r\n    );\r\n};\r\n\r\nexport default RegisterForm;\r\n","import React, {Fragment, useContext} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {Button, Container, Header, Image, Segment} from \"semantic-ui-react\";\r\nimport {RootStoreContext} from \"../../app/stores/rootStore\";\r\nimport LoginForm from \"../user/LoginForm\";\r\nimport RegisterForm from \"../user/RegisterForm\";\r\n\r\nconst HomePage = () => {\r\n    const token = window.localStorage.getItem('jwt');\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {isLoggedIn, user} = rootStore.userStore;\r\n    const {openModal} = rootStore.modalStore;\r\n\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead'>\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{marginBottom: 12}}/>\r\n                    Reactivities\r\n                </Header>\r\n                {isLoggedIn && user && token ? (\r\n                    <Fragment>\r\n                        <Header as='h2' inverted content={`Welcome back ${user.displayName}`}/>\r\n                        <Button as={Link} to='/activities' size='huge' inverted>\r\n                            Go to activities!\r\n                        </Button>\r\n                    </Fragment>\r\n                ) : (\r\n                    <Fragment>\r\n                        <Header as='h2' inverted content='Welcome to Reactivities'/>\r\n                        <Button onClick={() => openModal(<LoginForm/>)} to='/login' size='huge' inverted>\r\n                            Login\r\n                        </Button>\r\n                        <Button onClick={() => openModal(<RegisterForm/>)} size='huge' inverted>\r\n                            Register\r\n                        </Button>\r\n                    </Fragment>\r\n\r\n                )}\r\n\r\n            </Container>\r\n        </Segment>\r\n    );\r\n};\r\n\r\nexport default HomePage;\r\n","import React from 'react';\r\nimport {Image, List, Popup} from 'semantic-ui-react';\r\nimport {IAttendee} from \"../../../app/models/activity\";\r\n\r\ninterface IProps {\r\n    attendees: IAttendee[];\r\n}\r\n\r\nconst styles = {\r\n    borderColor: 'orange',\r\n    borderWidth: 2\r\n}\r\n\r\nconst ActivityListItemAttendees: React.FC<IProps> = ({attendees}) => {\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n                <List.Item key={attendee.username}>\r\n                    <Popup\r\n                        header={attendee.displayName}\r\n                        trigger={\r\n                            <Image bordered style={attendee.following ? styles : null} size='mini' circular src={attendee.image || '/assets/user.png'}/>\r\n                        }\r\n                    />\r\n                </List.Item>\r\n            ))}\r\n        </List>\r\n    );\r\n};\r\n\r\nexport default ActivityListItemAttendees;\r\n","import React, {useContext} from 'react';\r\nimport {Button, Icon, Item, ItemGroup, Label, Segment} from \"semantic-ui-react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {IActivity} from \"../../../app/models/activity\";\r\nimport {format} from 'date-fns';\r\nimport {RootStoreContext} from \"../../../app/stores/rootStore\";\r\nimport ActivityListItemAttendees from \"./ActivityListItemAttendees\";\r\n\r\nconst ActivityListItem: React.FC<{ activity: IActivity }> = ({activity}) => {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {submitting, deleteActivity, target} = rootStore.activityStore\r\n\r\n    const host = activity.attendees.filter(x => x.isHost)[0];\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                <ItemGroup>\r\n                    <Item>\r\n                        <Item.Image size='tiny' circular src={host.image || '/assets/user.png'} style={{marginBottom: 3}} />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>{activity.title}</Item.Header>\r\n                            <Item.Description>Hosted by <Link to={`profile/${host.username}`} >{host.displayName}</Link></Item.Description>\r\n                            {activity.isHost &&\r\n                             <Item.Description>\r\n                                <Label basic\r\n                                       color='orange'\r\n                                       content='You are hosting this activity'\r\n                                />\r\n                            </Item.Description>}\r\n                            {activity.isGoing && !activity.isHost &&\r\n                            <Item.Description>\r\n                                <Label\r\n                                       color='green'\r\n                                       content='You are going to this activity'\r\n                                />\r\n                            </Item.Description>}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </ItemGroup>\r\n            </Segment>\r\n            <Segment>\r\n                <Icon name={\"clock\"}/> {format(activity.date, 'h:mm a')}\r\n                <Icon name={\"marker\"}/> {activity.venue}, {activity.city}\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendees attendees={activity.attendees}/>\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button as={Link} to={`/activities/${activity?.id}`} floated={\"right\"} type=\"button\"\r\n                        content=\"View\" color=\"blue\"/>\r\n\r\n                <Button name={activity.id} loading={target === activity.id && submitting}\r\n                        onClick={(e) => deleteActivity(e, activity.id)} floated={\"right\"} type=\"button\"\r\n                        content=\"Delete\" color=\"red\"/>\r\n            </Segment>\r\n        </Segment.Group>\r\n\r\n    );\r\n};\r\n\r\nexport default ActivityListItem;\r\n","import React, {FC, Fragment, useContext} from 'react';\r\nimport {Item, Label} from \"semantic-ui-react\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport ActivityListItem from \"./ActivityListItem\";\r\nimport {RootStoreContext} from \"../../../app/stores/rootStore\";\r\nimport {format} from \"date-fns\";\r\n\r\nconst ActivityList: FC = () => {\r\n    const rootStore = useContext(RootStoreContext)\r\n    const {activitiesByDates} = rootStore.activityStore;\r\n\r\n    return (\r\n        <Fragment>\r\n            {activitiesByDates.map(([group, activities]) => (\r\n                <Fragment key={group}>\r\n                    <Label size='large' color='blue'>\r\n                        {format(group, 'eeee do MMMM')}\r\n                    </Label>\r\n                    <Item.Group divided>\r\n                        {activities.map(activity => (\r\n                            <ActivityListItem key={activity.id} activity={activity}/>\r\n                        ))\r\n                        }\r\n                    </Item.Group>\r\n                </Fragment>\r\n            ))}\r\n        </Fragment>\r\n\r\n    )\r\n}\r\n\r\nexport default observer(ActivityList);","import React, {Fragment, useContext} from 'react';\r\nimport {Header, Menu} from 'semantic-ui-react';\r\nimport {Calendar} from 'react-widgets';\r\nimport {RootStoreContext} from \"../../../app/stores/rootStore\";\r\nimport {observer} from \"mobx-react-lite\";\r\n\r\nconst ActivityFilters = () => {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {predicate, setPredicate} = rootStore.activityStore;\r\n    return (\r\n        <Fragment>\r\n            <Menu vertical size={'large'} style={{width: '100%', marginTop: 50}}>\r\n                <Header icon={'filter'} attached color={'teal'} content={'Filters'}/>\r\n                <Menu.Item\r\n                    active={predicate.size === 0}\r\n                    color={'blue'} name={'all'}\r\n                    content={'All Activities'}\r\n                    onClick={() => setPredicate('all', 'true')}\r\n                />\r\n                <Menu.Item\r\n                    active={predicate.has('isGoing')}\r\n                    onClick={() => setPredicate('isGoing', 'true')}\r\n                    color={'blue'} name={'username'}\r\n                    content={\"I'm Going\"}\r\n                />\r\n                <Menu.Item\r\n                    active={predicate.has('isHost')}\r\n                    onClick={() => setPredicate('isHost', 'true')}\r\n                    color={'blue'}\r\n                    name={'host'}\r\n                    content={\"I'm hosting\"}/>\r\n            </Menu>\r\n            <Header icon={'calendar'} attached color={'teal'} content={'Select Date'}/>\r\n            <Calendar\r\n                onChange={(date) => setPredicate('startDate', date!)}\r\n                value={predicate.get('startDate') || new Date()}\r\n            />\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default observer(ActivityFilters);","import React, {Fragment} from 'react';\r\nimport {Button, Placeholder, Segment} from 'semantic-ui-react';\r\n\r\nconst ActivityListItemPlaceholder = () => {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{marginTop: 50}}>\r\n                <Segment.Group>\r\n                    <Segment style={{minHeight: 110}}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line/>\r\n                                <Placeholder.Line/>\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line/>\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line/>\r\n                            <Placeholder.Line/>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{minHeight: 70}}/>\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View'/>\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\nexport default ActivityListItemPlaceholder;","import React, {useContext, useEffect, useState} from 'react';\r\nimport {Grid, List, Loader} from \"semantic-ui-react\";\r\nimport ActivityList from \"./ActivityList\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {RootStoreContext} from \"../../../app/stores/rootStore\";\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\nimport ActivityFilters from \"./ActivityFilters\";\r\nimport ActivityListItemPlaceholder from \"./ActivityListItemPlaceHolder\";\r\n\r\nconst ActivityDashboard: React.FC = () => {\r\n\r\n    const rootStore = useContext(RootStoreContext)\r\n    const {loadActivities, loadingInitial, setPage, totalPages, page} = rootStore.activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    const handleGetNext = () => {\r\n        setLoadingNext(true);\r\n        setPage(page + 1);\r\n        loadActivities().then(() => setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadActivities();\r\n    }, [loadActivities]);\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <List>\r\n                    {loadingInitial && page === 0\r\n                        ? <ActivityListItemPlaceholder/>\r\n                        :<InfiniteScroll\r\n                            pageStart={0}\r\n                            loadMore={handleGetNext}\r\n                            hasMore={!loadingNext && page + 1 < totalPages}\r\n                            initialLoad={false}\r\n                        >\r\n                            <ActivityList/>\r\n                        </InfiniteScroll>}\r\n\r\n                </List>\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityFilters/>\r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n                <Loader active={loadingNext}/>\r\n            </Grid.Column>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default observer(ActivityDashboard)","export interface IActivitiesEnvelope {\r\n    activities: IActivity[];\r\n    activityCount: number;\r\n}\r\n\r\nexport interface IActivity {\r\n    id: string;\r\n    title: string;\r\n    description: string;\r\n    category: string;\r\n    date: Date;\r\n    city: string;\r\n    venue: string;\r\n    isGoing: boolean;\r\n    isHost: boolean;\r\n    attendees: IAttendee[];\r\n    comments: IComment[];\r\n}\r\n\r\nexport interface IActivityFormValues extends Partial<IActivity> {\r\n    time?: Date;\r\n\r\n}\r\n\r\nexport class ActivityFormValues implements IActivityFormValues {\r\n    id: string = '';\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string = '';\r\n    date?: Date = undefined;\r\n    time?: Date = undefined;\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n\r\n    constructor(init?: IActivityFormValues) {\r\n        if (init && init.date) {\r\n            init.time = init.date;\r\n        }\r\n        Object.assign(this, init);\r\n    }\r\n\r\n}\r\n\r\nexport interface IAttendee {\r\n    username: string;\r\n    displayName: string;\r\n    image: string;\r\n    isHost: boolean;\r\n    following?: boolean;\r\n}\r\n\r\nexport interface IComment {\r\n    id: string;\r\n    createdAt: Date;\r\n    body: string;\r\n    username: string;\r\n    displayName: string;\r\n    image: string;\r\n}","import React from 'react';\r\nimport {FieldRenderProps} from \"react-final-form\";\r\nimport {FormField, FormFieldProps, Label} from \"semantic-ui-react\";\r\n\r\ninterface IProps extends FieldRenderProps<string, HTMLElement>, FormFieldProps {\r\n\r\n}\r\n\r\nconst TextAreaInput: React.FC<IProps> = ({\r\n                                        input,\r\n                                        rows,\r\n                                        placeholder,\r\n                                        meta: {touched, error}\r\n                                    }) => {\r\n    return <FormField error={touched && !!error}>\r\n        <textarea {...input}\r\n                  rows={rows}\r\n                  placeholder={placeholder}\r\n        />\r\n        {touched && error && (\r\n            <Label basic color={\"red\"}>\r\n                {error}\r\n            </Label>\r\n        )}\r\n    </FormField>\r\n};\r\n\r\nexport default TextAreaInput;\r\n","import React from 'react';\r\nimport {FieldRenderProps} from \"react-final-form\";\r\nimport {FormField, FormFieldProps, Label, Select} from \"semantic-ui-react\";\r\n\r\ninterface IProps extends FieldRenderProps<string, HTMLElement>, FormFieldProps {\r\n\r\n}\r\n\r\nconst SelectInput: React.FC<IProps> = ({\r\n                                           input,\r\n                                           options,\r\n                                           placeholder,\r\n                                           meta: {touched, error}\r\n                                       }) => {\r\n    return <FormField error={touched && !!error}>\r\n        <Select value={input.value}\r\n                onChange={(e, data) => input.onChange(data.value)}\r\n                placeholder={placeholder}\r\n                options={options}\r\n\r\n        />\r\n        {touched && error && (\r\n            <Label basic color={\"red\"}>\r\n                {error}\r\n            </Label>\r\n        )}\r\n    </FormField>\r\n};\r\n\r\nexport default SelectInput;\r\n","export const category = [\r\n    {key: 'drinks', text: 'Drinks', value: 'drinks'},\r\n    {key: 'culture', text: 'Culture', value: 'culture'},\r\n    {key: 'film', text: 'Film', value: 'film'},\r\n    {key: 'food', text: 'Food', value: 'food'},\r\n    {key: 'music', text: 'Music', value: 'music'},\r\n    {key: 'travel', text: 'Travel', value: 'travel'}\r\n];","import React from 'react';\r\nimport {FieldRenderProps} from \"react-final-form\";\r\nimport {FormField, FormFieldProps, Label} from \"semantic-ui-react\";\r\nimport {DateTimePicker} from \"react-widgets\";\r\n\r\ninterface IProps extends FieldRenderProps<Date, HTMLElement>, FormFieldProps {\r\n\r\n}\r\n\r\nconst DateInput: React.FC<IProps> = ({\r\n                                         input,\r\n                                         placeholder,\r\n                                         date = false,\r\n                                         time = false,\r\n                                         meta: {touched, error}, id,\r\n                                         ...rest\r\n                                     }) => {\r\n    return (<FormField error={touched && !!error}>\r\n        <DateTimePicker\r\n            placeholder={placeholder}\r\n            value={input.value || null}\r\n            onChange={input.onChange}\r\n            onBlur={input.onBlur}\r\n            onKeyDown={(e) => e.preventDefault()}\r\n            date={date}\r\n            time={time}\r\n            {...rest}\r\n        />\r\n        {touched && error && (\r\n            <Label basic color={\"red\"}>\r\n                {error}\r\n            </Label>\r\n        )}\r\n    </FormField>)\r\n};\r\n\r\nexport default DateInput;\r\n","import React, {FC, useContext, useEffect, useState} from 'react';\r\nimport {Button, Form, FormGroup, Grid, GridColumn, Segment} from \"semantic-ui-react\";\r\nimport {ActivityFormValues} from \"../../../app/models/activity\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {RouteComponentProps} from \"react-router\";\r\nimport {Field, Form as FinalForm} from 'react-final-form';\r\nimport TextInput from \"../../../app/common/form/TextInput\";\r\nimport TextAreaInput from \"../../../app/common/form/TextAreaInput\";\r\nimport SelectInput from \"../../../app/common/form/SelectInput\";\r\nimport {category} from \"../../../app/common/options/categoryOptions\";\r\n\r\nimport DateInput from \"../../../app/common/form/DateInput\";\r\nimport {combineDateAndTime} from \"../../../app/common/util/util\";\r\nimport {combineValidators, composeValidators, hasLengthGreaterThan, isRequired} from 'revalidate'\r\nimport {RootStoreContext} from \"../../../app/stores/rootStore\";\r\n\r\nconst validate = combineValidators({\r\n    title: isRequired({message: 'The event'}),\r\n    category: isRequired('Category'),\r\n    description: composeValidators(\r\n        isRequired('Description'),\r\n        hasLengthGreaterThan(4)({message: 'Description needs to be at least 5 characters'})\r\n    )(),\r\n    city: isRequired('City'),\r\n    venue: isRequired('Venue'),\r\n    date: isRequired('Date'),\r\n    time: isRequired('Time')\r\n})\r\n\r\ninterface DetailParams {\r\n    id: string;\r\n}\r\n\r\nconst ActivityForm: FC<RouteComponentProps<DetailParams>> = ({match, history}) => {\r\n\r\n    const rootStore = useContext(RootStoreContext)\r\n    const {submitting, loadActivity, createActivity, editActivity} = rootStore.activityStore;\r\n\r\n    const [activity, setActivity] = useState(new ActivityFormValues());\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (match.params.id) {\r\n            setLoading(true);\r\n            loadActivity(match.params.id)\r\n                .then((activity) => setActivity(new ActivityFormValues(activity)))\r\n                .finally(() => setLoading(false));\r\n        }\r\n    }, [loadActivity, match.params.id]);\r\n\r\n    const handleFinalFormSubmit = (values: any) => {\r\n        const dateAndTime = combineDateAndTime(values.date, values.time);\r\n        const {date, time, ...activity} = values;\r\n        activity.date = dateAndTime;\r\n\r\n        if (!activity.id) {\r\n            let newActivity = {\r\n                ...activity,\r\n                id: activity.id\r\n            }\r\n            createActivity(newActivity);\r\n        } else {\r\n            editActivity(activity);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Grid>\r\n            <GridColumn width={10}>\r\n                <Segment clearing>\r\n                    <FinalForm initialValues={activity}\r\n                               validate={validate}\r\n                               onSubmit={handleFinalFormSubmit}\r\n                               render={({handleSubmit, invalid, pristine}) => (\r\n                                   <Form onSubmit={handleSubmit} loading={loading}>\r\n                                       <Field name={'title'}\r\n                                              value={activity.title}\r\n                                              placeholder='Title'\r\n                                              component={TextInput}\r\n                                       />\r\n                                       <Field value={activity.description}\r\n                                              name={'description'}\r\n                                              rows={3}\r\n                                              placeholder='Description'\r\n                                              component={TextAreaInput}\r\n                                       />\r\n                                       <Field name={'category'}\r\n                                              value={activity.category}\r\n                                              placeholder='Category'\r\n                                              component={SelectInput}\r\n                                              options={category}\r\n                                       />\r\n                                       <FormGroup widths={\"equal\"}>\r\n                                           <Field name='date'\r\n                                                  placeholder='Date'\r\n                                                  value={activity.date}\r\n                                                  component={DateInput}\r\n                                                  date={true}\r\n                                           />\r\n                                           <Field name='time'\r\n                                                  time={true}\r\n                                                  placeholder='Time'\r\n                                                  value={activity.date}\r\n                                                  component={DateInput}\r\n                                           />\r\n                                       </FormGroup>\r\n\r\n                                       <Field name={'city'} value={activity.city}\r\n                                              placeholder='City'\r\n                                              component={TextInput}\r\n                                       />\r\n                                       <Field name={'venue'} value={activity.venue}\r\n                                              placeholder='Venue'\r\n                                              component={TextInput}\r\n                                       />\r\n                                       <Button loading={submitting}\r\n                                               disabled={loading || invalid || pristine}\r\n                                               floated={\"right\"} positive type=\"submit\"\r\n                                               content='Submit'\r\n                                       />\r\n                                       <Button\r\n                                           onClick={activity.id\r\n                                               ? () => history.push(`/activities/${activity.id}`)\r\n                                               : () => history.push('/activities')}\r\n                                           floated={\"right\"}\r\n                                           disabled={loading}\r\n                                           type=\"button\"\r\n                                           content='Cancel'/>\r\n                                   </Form>\r\n                               )}\r\n                    />\r\n                </Segment>\r\n            </GridColumn>\r\n        </Grid>\r\n\r\n    );\r\n}\r\n\r\nexport default observer(ActivityForm);","import React from 'react';\r\nimport {Dimmer, Loader} from \"semantic-ui-react\";\r\n\r\nconst LoadingComponent: React.FC<{ inverted?: boolean, content?: string }> =\r\n    ({inverted = true, content}) =>\r\n    {\r\n\r\n    return (\r\n        <Dimmer active inverted={inverted}>\r\n            <Loader content={content}/>\r\n        </Dimmer>\r\n    );\r\n};\r\n\r\nexport default LoadingComponent;\r\n","import React, {useContext} from 'react';\r\nimport {Button, Header, Image, Item, Segment} from \"semantic-ui-react\";\r\nimport {IActivity} from \"../../../app/models/activity\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {format} from 'date-fns';\r\nimport {RootStoreContext} from \"../../../app/stores/rootStore\";\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface IProps {\r\n    activity: IActivity;\r\n}\r\n\r\nconst ActivityDetailedHeader: React.FC<IProps> = ({activity}) => {\r\n\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {attendActivity, cancelAttendance, loading} = rootStore.activityStore;\r\n\r\n    const host = activity.attendees.filter(x => x.isHost)[0];\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{padding: '0'}}>\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle}/>\r\n                <Segment basic style={activityImageTextStyle}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{color: 'white'}}\r\n                                />\r\n                                <p>{format(activity.date, 'eeee do MMMM')}</p>\r\n                                <p>\r\n                                    Hosted by <Link to={`profile/${host.username}`}><strong>{host.displayName}</strong></Link>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <Button as={Link} to={`/manage/${activity.id}`} color='orange' floated='right'>\r\n                        Manage Event\r\n                    </Button>\r\n                ) : activity.isGoing ? (\r\n                    <Button loading={loading} onClick={cancelAttendance}>Cancel attendance</Button>\r\n                ) : (\r\n                    <Button loading={loading} onClick={attendActivity} color='teal'>Join Activity</Button>\r\n                )}\r\n\r\n            </Segment>\r\n        </Segment.Group>\r\n    );\r\n};\r\n\r\nexport default observer(ActivityDetailedHeader);\r\n","import React from 'react';\r\nimport {Grid, Icon, Segment} from \"semantic-ui-react\";\r\nimport {IActivity} from \"../../../app/models/activity\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {format} from \"date-fns\";\r\n\r\ninterface IProps {\r\n    activity: IActivity;\r\n}\r\n\r\nconst ActivityDetailedInfo: React.FC<IProps> = ({activity}) => {\r\n    return (\r\n        <div>\r\n            <Segment.Group>\r\n                <Segment attached='top'>\r\n                    <Grid>\r\n                        <Grid.Column width={1}>\r\n                            <Icon size='large' color='teal' name='info'/>\r\n                        </Grid.Column>\r\n                        <Grid.Column width={15}>\r\n                            <p>{activity.description}</p>\r\n                        </Grid.Column>\r\n                    </Grid>\r\n                </Segment>\r\n                <Segment attached>\r\n                    <Grid verticalAlign='middle'>\r\n                        <Grid.Column width={1}>\r\n                            <Icon name='calendar' size='large' color='teal'/>\r\n                        </Grid.Column>\r\n                        <Grid.Column width={15}>\r\n            <span>\r\n              {format(activity.date, 'eeee do MMMM')} at {format(activity.date, 'h:mm a')}\r\n            </span>\r\n                        </Grid.Column>\r\n                    </Grid>\r\n                </Segment>\r\n                <Segment attached>\r\n                    <Grid verticalAlign='middle'>\r\n                        <Grid.Column width={1}>\r\n                            <Icon name='marker' size='large' color='teal'/>\r\n                        </Grid.Column>\r\n                        <Grid.Column width={11}>\r\n                            <span>{activity.venue}, {activity.city}</span>\r\n                        </Grid.Column>\r\n                    </Grid>\r\n                </Segment>\r\n            </Segment.Group>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default observer(ActivityDetailedInfo);\r\n","import React, {Fragment, useContext, useEffect} from 'react';\r\nimport {Button, Comment, CommentGroup, Form, Header, Segment} from \"semantic-ui-react\";\r\nimport {RootStoreContext} from \"../../../app/stores/rootStore\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {Field, Form as FinalForm} from 'react-final-form';\r\nimport TextAreaInput from \"../../../app/common/form/TextAreaInput\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {formatDistance} from \"date-fns\";\r\n\r\nconst ActivityDetailedChat = () => {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {createHubConnection, stopHubConnection, addComment, activity} = rootStore.activityStore;\r\n\r\n    useEffect(() => {\r\n        createHubConnection(activity!.id);\r\n        return () => {\r\n            stopHubConnection();\r\n        }\r\n    }, [createHubConnection, stopHubConnection, activity])\r\n\r\n    return (\r\n        <Fragment>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{border: 'none'}}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached>\r\n                <CommentGroup>\r\n                    {activity && activity.comments && activity.comments.map((comment) => (\r\n                        <Comment key={comment.id}>\r\n                            <Comment.Avatar src={comment!.image || '/assets/user.png'}/>\r\n                            <Comment.Content>\r\n                                <Comment.Author as={Link}\r\n                                                to={`/profile/${comment.username}`}>{comment.displayName}\r\n                                </Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{formatDistance(comment.createdAt, new Date())}</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text>{comment.body}</Comment.Text>\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}\r\n                    <FinalForm\r\n                        onSubmit={addComment}\r\n                        render={({handleSubmit, submitting, form}) => (\r\n                            <Form onSubmit={() => {\r\n                                handleSubmit()!.then(() => form.reset())\r\n                            }}>\r\n                                <Field\r\n                                    name={'body'}\r\n                                    component={TextAreaInput}\r\n                                    rows={2}\r\n                                    placeholder={'Add your comment'}\r\n                                />\r\n                                <Button\r\n                                    content='Add Reply'\r\n                                    labelPosition='left'\r\n                                    icon='edit'\r\n                                    primary\r\n                                    loading={submitting}\r\n                                />\r\n                            </Form>\r\n                        )}\r\n\r\n\r\n                    />\r\n\r\n\r\n                </CommentGroup>\r\n            </Segment>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default observer(ActivityDetailedChat);\r\n","import React, {Fragment} from 'react';\r\nimport {Image, Item, Label, List, Segment} from \"semantic-ui-react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {IAttendee} from \"../../../app/models/activity\";\r\nimport { observer } from 'mobx-react-lite';\r\n\r\ninterface IProps {\r\n    attendees: IAttendee[];\r\n}\r\n\r\n\r\nconst ActivityDetailedSidebar: React.FC<IProps> = ({attendees}) => {\r\n    return (\r\n        <Fragment>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{border: 'none'}}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} Going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee => (\r\n                        <Item key={attendee.username} style={{position: 'relative'}}>\r\n                            {attendee.isHost && <Label\r\n                                style={{position: 'absolute'}}\r\n                                color='orange'\r\n                                ribbon={\"right\"}\r\n                            >\r\n                                Host\r\n                            </Label>}\r\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'}/>\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profile/${attendee.username}`}>{attendee.displayName}</Link>\r\n                                </Item.Header>\r\n                                {attendee.following &&\r\n                                <Item.Extra style={{color: 'orange'}}>Following</Item.Extra>}\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default observer(ActivityDetailedSidebar);\r\n","import React, {FC, useContext, useEffect} from 'react';\r\nimport {Grid, GridColumn} from \"semantic-ui-react\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {RouteComponentProps} from \"react-router\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport ActivityDetailedHeader from \"./ActivityDetailedHeader\";\r\nimport ActivityDetailedInfo from \"./ActivityDetailedInfo\";\r\nimport ActivityDetailedChat from \"./ActivityDetailedChat\";\r\nimport ActivityDetailedSidebar from \"./ActivityDetailedSidebar\";\r\nimport {RootStoreContext} from \"../../../app/stores/rootStore\";\r\n\r\ninterface DetailParams {\r\n    id: string;\r\n}\r\n\r\nconst ActivityDetails: FC<RouteComponentProps<DetailParams>> = ({match}) => {\r\n        const rootStore = useContext(RootStoreContext)\r\n        const {activity, loadActivity, loadingInitial} = rootStore.activityStore;\r\n\r\n        useEffect(() => {\r\n            loadActivity(match.params.id);\r\n        }, [loadActivity, match.params.id])\r\n\r\n        if (loadingInitial) return <LoadingComponent content='Loading activity...'/>\r\n\r\n        if (!activity)\r\n            return <h2>Activity not found</h2>\r\n\r\n        return (\r\n            <Grid>\r\n                <GridColumn width={10}>\r\n                    <ActivityDetailedHeader activity={activity}/>\r\n                    <ActivityDetailedInfo activity={activity}/>\r\n                    <ActivityDetailedChat/>\r\n                </GridColumn>\r\n                <GridColumn width={6}>\r\n                    <ActivityDetailedSidebar attendees={activity.attendees}/>\r\n                </GridColumn>\r\n            </Grid>\r\n        )\r\n    }\r\n;\r\n\r\nexport default observer(ActivityDetails)","import React from 'react';\r\nimport {Button, Header, Icon, Segment} from 'semantic-ui-react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst NotFound = () => {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search'/>\r\n                Oops - we've looked everywhere but couldn't find this.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary>\r\n                    Return to Activities page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    );\r\n};\r\n\r\nexport default NotFound;","import React, {useContext} from 'react';\r\nimport {Modal} from \"semantic-ui-react\";\r\nimport {RootStoreContext} from \"../../stores/rootStore\";\r\nimport {observer} from \"mobx-react-lite\";\r\n\r\n\r\nconst ModalContainer = () => {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {modal: {open, body}, closeModal, openModal} = rootStore.modalStore;\r\n\r\n    return (\r\n        <Modal\r\n            onClose={closeModal}\r\n            onOpen={openModal}\r\n            open={open}\r\n            size='mini'\r\n        >\r\n            <Modal.Content>\r\n                {body}\r\n            </Modal.Content>\r\n            {/*<Modal.Actions>*/}\r\n            {/*    <Button color='black' onClick={closeModal}>*/}\r\n            {/*        Nope*/}\r\n            {/*    </Button>*/}\r\n            {/*    <Button*/}\r\n            {/*        content=\"Yep, that's me\"*/}\r\n            {/*        labelPosition='right'*/}\r\n            {/*        icon='checkmark'*/}\r\n            {/*        onClick={closeModal}*/}\r\n            {/*        positive*/}\r\n            {/*    />*/}\r\n            {/*</Modal.Actions>*/}\r\n        </Modal>\r\n    )\r\n};\r\n\r\nexport default observer(ModalContainer);\r\n","import React, {FC} from 'react';\r\nimport {Button, Divider, Grid, Header, Item, Reveal, Segment, Statistic} from 'semantic-ui-react';\r\nimport {IProfile} from \"../../app/models/Profile\";\r\nimport {observer} from \"mobx-react-lite\";\r\n\r\n\r\ninterface IProps {\r\n    profile: IProfile;\r\n    follow: (username: string) => void;\r\n    unfollow: (username: string) => void;\r\n    isCurrentUser: boolean;\r\n    loading: boolean;\r\n}\r\n\r\nconst ProfileHeader: FC<IProps> = ({profile, follow, unfollow, isCurrentUser, loading}) => {\r\n\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image\r\n                                avatar\r\n                                size='small'\r\n                                src={profile?.image || '/assets/user.png'}\r\n                            />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1'>{profile?.displayName}</Header>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic label='Followers' value={profile?.followersCount}/>\r\n                        <Statistic label='Following' value={profile?.followingCount}/>\r\n                    </Statistic.Group>\r\n                    <Divider/>\r\n                    {!isCurrentUser &&\r\n                    <Reveal animated='move'>\r\n                        <Reveal.Content visible style={{width: '100%'}}>\r\n                            <Button\r\n                                fluid\r\n                                color='teal'\r\n                                content={profile?.following ? 'Following' : 'Not following'}\r\n                            />\r\n                        </Reveal.Content>\r\n                        <Reveal.Content hidden>\r\n                            <Button\r\n                                loading={loading}\r\n                                fluid\r\n                                basic\r\n                                color={profile?.following ? 'red' : 'green'}\r\n                                content={profile?.following ? 'Unfollow' : 'Follow'}\r\n                                onClick={profile?.following ? () => unfollow(profile.userName) : () => follow(profile.userName)}\r\n                            />\r\n                        </Reveal.Content>\r\n                    </Reveal>\r\n                    }\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    );\r\n};\r\n\r\nexport default observer(ProfileHeader);","import React, {FC, useCallback} from 'react'\r\nimport {useDropzone} from 'react-dropzone'\r\nimport {Header, Icon} from \"semantic-ui-react\";\r\n\r\ninterface IProps {\r\n    setFiles: (files: object[]) => void;\r\n}\r\n\r\nconst dropZoneStyles = {\r\n    border: 'dashed 3px',\r\n    borderColor: '#eee',\r\n    borderRadius: '5px',\r\n    paddingTop: '30px',\r\n    textAlign: 'center' as 'center',\r\n    height: '200px'\r\n}\r\n\r\nconst dropZoneActive = {\r\n    borderColor: 'green'\r\n}\r\n\r\nconst PhotoWidgetDropzone: FC<IProps> = ({setFiles}) => {\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        setFiles(acceptedFiles.map((file: object) => Object.assign(file, {\r\n            preview: URL.createObjectURL(file)\r\n        })));\r\n    }, [setFiles])\r\n    const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\r\n\r\n    return (\r\n        <div {...getRootProps()} style={isDragActive ? {...dropZoneStyles, ...dropZoneActive} : dropZoneStyles}>\r\n            <input {...getInputProps()} />\r\n            <Icon name={'upload'} size={\"huge\"}/>\r\n            <Header content={'Drop image here'}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PhotoWidgetDropzone;","import React from 'react';\r\nimport \"cropperjs/dist/cropper.css\";\r\nimport {Cropper} from 'react-cropper';\r\n\r\ninterface IProps {\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: IProps) {\r\n    return (\r\n        <Cropper\r\n            src={imagePreview}\r\n            style={{height: 200, width: '100%'}}\r\n            // @ts-ignore\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n    );\r\n}\r\n;\r\n","import React, {Fragment, useEffect, useState} from 'react';\r\nimport {Button, Grid, Header} from 'semantic-ui-react';\r\nimport {observer} from 'mobx-react-lite';\r\nimport PhotoWidgetDropzone from \"./PhotoWidgetDropzone\";\r\nimport PhotoWidgetCropper from \"./PhotoWidgetCropper\";\r\n\r\ninterface IProps {\r\n    loading: boolean;\r\n    uploadPhoto: (file: Blob) => void;\r\n    setAddPhotoMode: (addPhotoMode: boolean) => void;\r\n}\r\n\r\nexport const PhotoUploadWidget = ({loading, uploadPhoto, setAddPhotoMode}: IProps) => {\r\n    const [files, setFiles] = useState<any[]>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach(file => URL.revokeObjectURL(file.preview))\r\n        }\r\n    }, [files])\r\n\r\n    function onCrop() {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => {\r\n                if (blob) {\r\n                    uploadPhoto(blob);\r\n                    setFiles([]);\r\n                    setAddPhotoMode(false);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <Grid>\r\n                <Grid.Row/>\r\n                <Grid.Column width={4}>\r\n                    <Header color='teal' sub content='Step 1 - Add Photo'/>\r\n                    <PhotoWidgetDropzone setFiles={setFiles}/>\r\n                </Grid.Column>\r\n                <Grid.Column width={1}/>\r\n                <Grid.Column width={4}>\r\n                    <Header sub color='teal' content='Step 2 - Resize image'/>\r\n                    {files.length > 0 &&\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview}/>}\r\n                </Grid.Column>\r\n                <Grid.Column width={1}/>\r\n                <Grid.Column width={4}>\r\n                    <Header sub color='teal' content='Step 3 - Preview & Upload'/>\r\n                    {files && files.length > 0 &&\r\n                    <>\r\n                        <div className='img-preview' style={{minHeight: 200, overflow: 'hidden'}}/>\r\n                        <Button.Group>\r\n                            <Button onClick={onCrop} positive icon={'check'} loading={loading}/>\r\n                            <Button onClick={() => setFiles([])} icon={'close'}/>\r\n                        </Button.Group>\r\n                    </>}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Fragment>\r\n    )\r\n};\r\n\r\nexport default observer(PhotoUploadWidget);","import React, {useContext, useState} from 'react';\r\nimport {Button, ButtonGroup, Card, Grid, Header, Image, Tab} from \"semantic-ui-react\";\r\nimport {RootStoreContext} from \"../../app/stores/rootStore\";\r\nimport {PhotoUploadWidget} from \"../../app/common/photoUpload/PhotoUploadWidget\";\r\nimport {observer} from \"mobx-react-lite\";\r\n\r\nconst ProfilePhotos = () => {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {profile, isCurrentUser, uploadPhoto, uploadingPhoto, setMainPhoto, loading, deletePhoto} = rootStore.profileStore;\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState<string | undefined>(undefined);\r\n    const [deleteTarget, setDeleteTarget] = useState<string | undefined>(undefined);\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16} style={{paddingBottom: 0}}>\r\n                    <Header floated={\"left\"} icon={'image'} content={'Photos'}/>\r\n                    {isCurrentUser &&\r\n                    <Button floated={\"right\"}\r\n                            basic\r\n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                    />\r\n                    }\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto={uploadPhoto} loading={uploadingPhoto}\r\n                                           setAddPhotoMode={setAddPhotoMode}/>\r\n                    ) : <Card.Group itemsPerRow={5}>\r\n                        {profile && profile.photos.map(photo => (\r\n                            <Card key={photo.id}>\r\n                                <Image src={photo.url}/>\r\n                                {isCurrentUser &&\r\n                                <ButtonGroup fluid widths={2}>\r\n                                    <Button\r\n                                        name={photo.id}\r\n                                        id={photo.id}\r\n                                        onClick={(e) => {\r\n                                            setMainPhoto(photo);\r\n                                            setTarget(e.currentTarget.name)\r\n                                        }}\r\n                                        basic\r\n                                        positive\r\n                                        content={'Main'}\r\n                                        loading={loading && target === photo.id}\r\n                                        disabled={photo.isMain}\r\n                                    />\r\n                                    <Button\r\n                                        name={photo.id}\r\n                                        id={photo.id}\r\n                                        onClick={(e) => {\r\n                                            deletePhoto(photo);\r\n                                            setDeleteTarget(e.currentTarget.name)\r\n                                        }}\r\n                                        basic\r\n                                        negative\r\n                                        icon={'trash'}\r\n                                        loading={loading && deleteTarget === photo.id}\r\n                                        disabled={photo.isMain}\r\n                                    />\r\n                                </ButtonGroup>\r\n                                }\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                    }\r\n\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n};\r\n\r\nexport default observer(ProfilePhotos);\r\n","import {observer} from 'mobx-react-lite';\r\nimport React, {useContext, useState} from 'react';\r\nimport {Button, Card, Form, Grid, Header, Tab} from \"semantic-ui-react\";\r\nimport {RootStoreContext} from \"../../app/stores/rootStore\";\r\nimport {Field, Form as FinalForm} from \"react-final-form\";\r\nimport {IProfileFormValues} from \"../../app/models/Profile\";\r\nimport TextInput from \"../../app/common/form/TextInput\";\r\nimport ErrorMessage from \"../../app/common/form/ErrorMessage\";\r\nimport {FORM_ERROR} from \"final-form\";\r\nimport TextAreaInput from \"../../app/common/form/TextAreaInput\";\r\nimport {combineValidators, isRequired} from \"revalidate\";\r\n\r\nconst validate = combineValidators({\r\n    displayname: isRequired({message: 'Display name'}),\r\n})\r\n\r\nconst ProfileAbout = () => {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {profile, isCurrentUser, updateProfile, loadingProfile} = rootStore.profileStore;\r\n    const [updateMode, setUpdateMode] = useState(false);\r\n\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16} style={{paddingBottom: 0}}>\r\n                    <Header floated={\"left\"} icon={'user'}/>\r\n                    {isCurrentUser &&\r\n                    <Button floated={\"right\"}\r\n                            basic\r\n                            content={updateMode ? 'Cancel' : 'Edit'}\r\n                            onClick={() => setUpdateMode(!updateMode)} fo\r\n                    />\r\n                    }\r\n                    {!updateMode &&\r\n                    <Card fluid>\r\n                        <Card.Content header={'About ' + profile?.displayName}/>\r\n                        <Card.Content description={profile?.bio}/>\r\n                    </Card>\r\n                    }\r\n\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {updateMode &&\r\n                    <FinalForm\r\n                        initialValues={profile!}\r\n                        validate={validate}\r\n                        onSubmit={(values:IProfileFormValues)=> updateProfile(values).then(() => {setUpdateMode(false)}).catch(error => ({\r\n                            [FORM_ERROR]: error\r\n                        }))}\r\n                               render={({handleSubmit, submitting, form, submitError, invalid, pristine, dirtySinceLastSubmit}) => (\r\n                                   <Form onSubmit={handleSubmit} error>\r\n                                       <Field\r\n                                           name='displayname'\r\n                                           component={TextInput}\r\n                                           placeholder='Display Name'\r\n                                           value={profile!.displayName}\r\n                                           initialValue={profile!.displayName}\r\n                                       />\r\n                                       <Field\r\n                                           name='bio'\r\n                                           component={TextAreaInput}\r\n                                           placeholder='Bio'\r\n                                           value={profile!.bio}\r\n\r\n                                       />\r\n                                       {submitError && !dirtySinceLastSubmit &&\r\n                                       <ErrorMessage\r\n                                           error={submitError}\r\n                                       />\r\n                                       }\r\n                                       <Button disabled={(invalid && !dirtySinceLastSubmit) || pristine}\r\n                                               loading={submitting || loadingProfile}\r\n                                               positive\r\n                                               content='Update'\r\n                                               floated={'right'}\r\n                                               type=\"submit\"\r\n                                       />\r\n                                       {/*<pre>{JSON.stringify(form.getState(), null, 2)}</pre>*/}\r\n                                   </Form>\r\n                               )}\r\n\r\n\r\n                    />\r\n                    }\r\n                </Grid.Column>\r\n            </Grid>\r\n\r\n        </Tab.Pane>\r\n    );\r\n};\r\n\r\nexport default observer(ProfileAbout);\r\n","import React from 'react';\r\nimport { Card, Image, Icon} from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport {IProfile} from \"../../app/models/Profile\";\r\nimport {observer} from \"mobx-react-lite\";\r\n\r\ninterface IProps {\r\n    profile: IProfile;\r\n}\r\n\r\nconst ProfileCard:React.FC<IProps> = ({profile}) => {\r\n    return (\r\n        <Card as={Link} to={`/profile/${profile.userName}`}>\r\n            <Image src={profile.image || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <div>\r\n                    <Icon name='user' />\r\n                    {profile.followersCount} Followers\r\n                </div>\r\n            </Card.Content>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default observer(ProfileCard);","import React, {useContext} from 'react';\r\nimport {Card, Grid, Header, Tab} from 'semantic-ui-react';\r\nimport {RootStoreContext} from '../../app/stores/rootStore';\r\nimport ProfileCard from './ProfileCard';\r\nimport {observer} from \"mobx-react-lite\";\r\n\r\nconst ProfileFollowings = () => {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {profile,  loading, followings, activeTab} = rootStore.profileStore;\r\n\r\n    return (\r\n        <Tab.Pane loading={loading}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header\r\n                        floated='left'\r\n                        icon='user'\r\n                        content={\r\n                            activeTab === 3\r\n                                ? `People following ${profile!.displayName}`\r\n                                : `People ${profile!.displayName} is following`\r\n                        }\r\n                    />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={5}>\r\n                        {followings.map((profile) => (\r\n                            <ProfileCard key={profile.userName} profile={profile}/>\r\n                        ))}\r\n                        {/*<Image src={'/assets/user.png'} />*/}\r\n                        {/*<Card.Content>*/}\r\n                        {/*    <Card.Header>{'asfasf'}</Card.Header>*/}\r\n                        {/*</Card.Content>*/}\r\n                        {/*<Card.Content extra>*/}\r\n                        {/*</Card.Content>*/}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n};\r\n\r\nexport default observer(ProfileFollowings);","import React, {useContext, useEffect} from 'react';\r\nimport {observer} from 'mobx-react-lite';\r\nimport {Card, Grid, Header, Image, Tab, TabProps} from 'semantic-ui-react';\r\nimport {Link} from 'react-router-dom';\r\nimport {IUserActivity} from '../../app/models/Profile';\r\nimport {format} from 'date-fns';\r\nimport {RootStoreContext} from '../../app/stores/rootStore';\r\n\r\nconst panes = [\r\n    {menuItem: 'Future Events', pane: {key: 'futureEvents'}},\r\n    {menuItem: 'Past Events', pane: {key: 'pastEvents'}},\r\n    {menuItem: 'Hosting', pane: {key: 'hosted'}}\r\n];\r\n\r\nconst ProfileEvents = () => {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {\r\n        loadUserActivities,\r\n        profile,\r\n        loadingActivities,\r\n        userActivities\r\n    } = rootStore.profileStore!;\r\n\r\n    useEffect(() => {\r\n        loadUserActivities(profile!.userName);\r\n    }, [loadUserActivities, profile]);\r\n\r\n    const handleTabChange = (\r\n        e: React.MouseEvent<HTMLDivElement, MouseEvent>,\r\n        data: TabProps\r\n    ) => {\r\n        let predicate;\r\n        switch (data.activeIndex) {\r\n            case 1:\r\n                predicate = 'past';\r\n                break;\r\n            case 2:\r\n                predicate = 'hosting';\r\n                break;\r\n            default:\r\n                predicate = 'future';\r\n                break;\r\n        }\r\n        loadUserActivities(profile!.userName, predicate);\r\n    };\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='calendar' content={'Activities'}/>\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        panes={panes}\r\n                        menu={{secondary: true, pointing: true}}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br/>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {userActivities.map((activity: IUserActivity) => (\r\n                            <Card\r\n                                as={Link}\r\n                                to={`/activities/${activity.id}`}\r\n                                key={activity.id}\r\n                            >\r\n                                <Image\r\n                                    src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                                    style={{minHeight: 100, objectFit: 'cover'}}\r\n                                />\r\n                                <Card.Content>\r\n                                    <Card.Header textAlign='center'>{activity.title}</Card.Header>\r\n                                    <Card.Meta textAlign='center'>\r\n                                        <div>{format(new Date(activity.date), 'do LLL')}</div>\r\n                                        <div>{format(new Date(activity.date), 'h:mm a')}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n};\r\n\r\nexport default observer(ProfileEvents);\r\n","import React from 'react';\r\nimport {Tab} from \"semantic-ui-react\";\r\nimport ProfilePhotos from \"./ProfilePhotos\";\r\nimport ProfileAbout from \"./ProfileAbout\";\r\nimport ProfileFollowings from \"./ProfileFollowings\";\r\nimport ProfileActivities from \"./ProfileActivities\";\r\n\r\ninterface IProps {\r\n    setActiveTab: (activeIndex: any) => void;\r\n}\r\n\r\nconst panes = [\r\n    {menuItem: 'About', render: () => <ProfileAbout/>},\r\n    {menuItem: 'Photos', render: () => <ProfilePhotos/>},\r\n    {menuItem: 'Activities', render: () => <ProfileActivities/>},\r\n    {menuItem: 'Followers', render: () => <ProfileFollowings/>},\r\n    {menuItem: 'Following', render: () => <ProfileFollowings/>}\r\n]\r\n\r\nconst ProfileContent = ({setActiveTab}:IProps) => {\r\n    return (\r\n        <Tab\r\n            menu={{fluid: true, vertical: true}}\r\n            menuPosition={\"right\"}\r\n            panes={panes}\r\n            onTabChange={(e, data) => setActiveTab(data.activeIndex)}\r\n        />\r\n\r\n    );\r\n};\r\n\r\nexport default ProfileContent;\r\n","import React, {useContext, useEffect} from 'react';\r\nimport {Grid} from \"semantic-ui-react\";\r\nimport ProfileHeader from \"./ProfileHeader\";\r\nimport ProfileContent from \"./ProfileContent\";\r\nimport {RootStoreContext} from \"../../app/stores/rootStore\";\r\nimport {RouteComponentProps} from 'react-router-dom';\r\nimport LoadingComponent from \"../../app/layout/LoadingComponent\";\r\nimport {observer} from \"mobx-react-lite\";\r\n\r\ninterface RouteParams {\r\n    username: string\r\n}\r\n\r\ninterface IProps extends RouteComponentProps<RouteParams> {\r\n\r\n}\r\n\r\nconst ProfilePage: React.FC<IProps> = ({match}) => {\r\n        const rootStore = useContext(RootStoreContext);\r\n        const {loadingProfile, profile, loadProfile, follow, unfollow, isCurrentUser, loading, setActiveTab} = rootStore.profileStore;\r\n        const {user} = rootStore.userStore;\r\n\r\n        useEffect(() => {\r\n                loadProfile(match.params.username || user!.userName!);\r\n            }, [loadProfile, match, user]\r\n        )\r\n\r\n        if (loadingProfile) return <LoadingComponent content={'Loading profile...'}/>\r\n\r\n        return (\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <ProfileHeader profile={profile!} follow={follow} unfollow={unfollow} isCurrentUser={isCurrentUser} loading={loading}/>\r\n                    <ProfileContent setActiveTab={setActiveTab}/>\r\n                </Grid.Column>\r\n            </Grid>\r\n        );\r\n    }\r\n;\r\n\r\nexport default observer(ProfilePage);\r\n","import { observer } from 'mobx-react-lite';\r\nimport React, {useContext} from 'react';\r\nimport {Redirect, Route, RouteComponentProps, RouteProps} from 'react-router-dom';\r\nimport {RootStoreContext} from \"../stores/rootStore\";\r\n\r\ninterface IProps extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>>\r\n}\r\n\r\nconst PrivateRoute = ({component: Component, ...rest}: IProps) => {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {isLoggedIn} = rootStore.userStore;\r\n\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={props => isLoggedIn ? <Component {...props} /> : <Redirect to={'/'}/>}\r\n        />\r\n    );\r\n};\r\n\r\nexport default observer(PrivateRoute);\r\n","import React, {Fragment, useContext, useEffect} from 'react';\nimport {Container} from \"semantic-ui-react\";\nimport Navbar from \"../../features/nav/navbar\";\nimport {observer} from 'mobx-react-lite'\nimport {Route, RouteComponentProps, Switch, withRouter} from 'react-router-dom'\nimport HomePage from \"../../features/home/HomePage\";\nimport ActivityDashboard from \"../../features/activities/dashboard/ActivityDashboard\";\nimport ActivityForm from \"../../features/activities/form/ActivityForm\";\nimport ActivityDetails from \"../../features/activities/details/ActivityDetails\";\nimport NotFound from \"./NotFound\";\nimport {ToastContainer} from \"react-toastify\";\nimport {RootStoreContext} from \"../stores/rootStore\";\nimport LoadingComponent from \"./LoadingComponent\";\nimport ModalContainer from \"../common/modals/ModalContainer\";\nimport ProfilePage from \"../../features/profiles/ProfilePage\";\nimport PrivateRoute from \"./PrivateRoute\";\n\nconst App: React.FC<RouteComponentProps> = ({location}) => {\n    const rootStore = useContext(RootStoreContext);\n    const {setAppLoaded, token, appLoaded} = rootStore.commonStore;\n    const {getUser} = rootStore.userStore;\n\n    useEffect(() => {\n        if (token) {\n            getUser().finally(() => setAppLoaded());\n        } else {\n            setAppLoaded();\n        }\n    }, [getUser, setAppLoaded, token])\n\n    if (!appLoaded) return <LoadingComponent content='Loading app...'/>\n\n    return (\n        <Fragment>\n            <ModalContainer />\n            <ToastContainer position={\"bottom-right\"}/>\n            <Route exact path='/' component={HomePage}/>\n            <Route path={'/(.+)'} render={() =>\n                <Fragment>\n                    <Navbar/>\n                    <Container style={{marginTop: '7em'}}>\n                        <Switch>\n                            <PrivateRoute exact path='/activities' component={ActivityDashboard}/>\n                            <PrivateRoute path='/activities/:id' component={ActivityDetails}/>\n                            <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']}\n                                   component={ActivityForm}/>\n                            <PrivateRoute path='/profile/:username' component={ProfilePage}/>\n                            <Route component={NotFound}/>\n                        </Switch>\n                    </Container>\n                </Fragment>}/>\n        </Fragment>\n    );\n}\n\nexport default withRouter(observer(App));\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {useEffect} from \"react\";\r\nimport {useLocation} from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n    const {pathname} = useLocation();\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n    }, [pathname]);\r\n\r\n    return null;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport {Router} from \"react-router-dom\";\nimport ScrollToTop from \"./app/layout/ScrollToTop\";\nimport {createBrowserHistory} from 'history';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-widgets/dist/css/react-widgets.css';\nimport dateFnsLocalizer from 'react-widgets-date-fns';\n\ndateFnsLocalizer();\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n    <Router history={history}>\n        <ScrollToTop/>\n        <App/>\n    </Router>,\n    document.getElementById('root')\n)\n;\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}