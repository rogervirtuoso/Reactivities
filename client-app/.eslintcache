[{"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\activities\\form\\ActivityForm.tsx":"1","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\layout\\App.tsx":"2","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\nav\\navbar.tsx":"3","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetails.tsx":"4","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityDashboard.tsx":"5","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityList.tsx":"6","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\index.tsx":"7","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\reportWebVitals.ts":"8","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\api\\agent.ts":"9","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\layout\\LoadingComponent.tsx":"10","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\stores\\activityStore.ts":"11","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\home\\HomePage.tsx":"12","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\layout\\ScrollToTop.tsx":"13","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityListItem.tsx":"14","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedHeader.tsx":"15","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedInfo.tsx":"16","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedChat.tsx":"17","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedSidebar.tsx":"18","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\layout\\NotFound.tsx":"19","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\common\\form\\TextInput.tsx":"20","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\common\\form\\TextAreaInput.tsx":"21","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\common\\form\\SelectInput.tsx":"22","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\common\\form\\DateInput.tsx":"23","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\common\\options\\categoryOptions.ts":"24","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\common\\util\\util.ts":"25","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\user\\LoginForm.tsx":"26","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\stores\\rootStore.ts":"27","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\models\\activity.ts":"28","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\stores\\userStore.ts":"29","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\stores\\commonStore.ts":"30"},{"size":6661,"mtime":1611044877571,"results":"31","hashOfConfig":"32"},{"size":2328,"mtime":1611659518003,"results":"33","hashOfConfig":"32"},{"size":1915,"mtime":1611658224260,"results":"34","hashOfConfig":"32"},{"size":1629,"mtime":1611044877560,"results":"35","hashOfConfig":"32"},{"size":1028,"mtime":1611658035700,"results":"36","hashOfConfig":"32"},{"size":1060,"mtime":1611044877514,"results":"37","hashOfConfig":"32"},{"size":920,"mtime":1610069361511,"results":"38","hashOfConfig":"32"},{"size":425,"mtime":1606477932152,"results":"39","hashOfConfig":"32"},{"size":2654,"mtime":1611657912537,"results":"40","hashOfConfig":"32"},{"size":372,"mtime":1609259679108,"results":"41","hashOfConfig":"32"},{"size":5251,"mtime":1611222914149,"results":"42","hashOfConfig":"32"},{"size":1647,"mtime":1611658179104,"results":"43","hashOfConfig":"32"},{"size":262,"mtime":1609680675163,"results":"44","hashOfConfig":"32"},{"size":2000,"mtime":1611048185726,"results":"45","hashOfConfig":"32"},{"size":2097,"mtime":1611043902546,"results":"46","hashOfConfig":"32"},{"size":1954,"mtime":1611043902674,"results":"47","hashOfConfig":"32"},{"size":2427,"mtime":1609768219410,"results":"48","hashOfConfig":"32"},{"size":2424,"mtime":1609768495969,"results":"49","hashOfConfig":"32"},{"size":622,"mtime":1609925844866,"results":"50","hashOfConfig":"32"},{"size":906,"mtime":1611226905535,"results":"51","hashOfConfig":"32"},{"size":898,"mtime":1610015140081,"results":"52","hashOfConfig":"32"},{"size":999,"mtime":1610022647035,"results":"53","hashOfConfig":"32"},{"size":1258,"mtime":1610105097614,"results":"54","hashOfConfig":"32"},{"size":346,"mtime":1610022647086,"results":"55","hashOfConfig":"32"},{"size":361,"mtime":1610071604188,"results":"56","hashOfConfig":"32"},{"size":1697,"mtime":1611226682735,"results":"57","hashOfConfig":"32"},{"size":614,"mtime":1611659868564,"results":"58","hashOfConfig":"32"},{"size":728,"mtime":1610072652222,"results":"59","hashOfConfig":"32"},{"size":1363,"mtime":1611659535836,"results":"60","hashOfConfig":"32"},{"size":874,"mtime":1611659849341,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"4c80u6",{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"64"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"64"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"64"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"64"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"64"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\activities\\form\\ActivityForm.tsx",[],["128","129"],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\layout\\App.tsx",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\nav\\navbar.tsx",["130"],"import React, {FC, useContext} from 'react';\r\nimport {Button, Container, Dropdown, Image, Menu} from \"semantic-ui-react\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {Link, NavLink} from \"react-router-dom\";\r\nimport {RootStoreContext} from \"../../app/stores/rootStore\";\r\n\r\n\r\nconst Navbar: FC = () => {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {isLoggedIn, user, logout} = rootStore.userStore;\r\n    return (\r\n        <Menu fixed={\"top\"} inverted>\r\n            <Container>\r\n                <Menu.Item header as={NavLink} exact to='/'>\r\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{marginRight: '10px'}}></img>\r\n                    Reactivities\r\n                </Menu.Item>\r\n                <Menu.Item name='Activities' as={NavLink} to='/activities'/>\r\n                <Menu.Item>\r\n                    <Button onClick={rootStore.activityStore.openCreateForm} type=\"button\" positive as={NavLink}\r\n                            to='/createActivity'\r\n                            content='Create Activity'></Button>\r\n                </Menu.Item>\r\n                {user &&\r\n                <Menu.Item position='right'>\r\n                    <Image avatar spaced='right' src={user.image || '/assets/user.png'}/>\r\n                    <Dropdown pointing='top left' text={user.displayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item\r\n                                as={Link}\r\n                                to={`/profile/username`}\r\n                                text='My profile'\r\n                                icon='user'/>\r\n                            <Dropdown.Item text='Logout' icon='power' onClick={logout}/>\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n                }\r\n            </Container>\r\n        </Menu>\r\n    );\r\n};\r\n\r\nexport default observer(Navbar)","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetails.tsx",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityDashboard.tsx",["131"],"import React, {useContext, useEffect} from 'react';\r\nimport {Grid, List} from \"semantic-ui-react\";\r\nimport ActivityList from \"./ActivityList\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport {RootStoreContext} from \"../../../app/stores/rootStore\";\r\n\r\nconst ActivityDashboard: React.FC = () => {\r\n\r\n    const rootStore = useContext(RootStoreContext)\r\n    const {loadActivities, loadingInitial} = rootStore.activityStore;\r\n\r\n    useEffect(() => {\r\n        loadActivities();\r\n    }, []);\r\n\r\n    if (loadingInitial) {\r\n        return <LoadingComponent content=\"Loading activities...\"/>\r\n    }\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <List>\r\n                    <ActivityList/>\r\n                </List>\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <h2>Activity filters</h2>\r\n            </Grid.Column>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default observer(ActivityDashboard)","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityList.tsx",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\index.tsx",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\reportWebVitals.ts",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\api\\agent.ts",["132"],"import axios, {AxiosResponse} from 'axios';\r\nimport {IActivity} from \"../models/activity\";\r\nimport {history} from \"../../index\";\r\nimport {toast} from \"react-toastify\";\r\nimport {IUser, IUserFormValues} from \"../models/User\";\r\n\r\naxios.defaults.baseURL = 'http://localhost:5000/api';\r\n\r\nconst axiosConfig = {\r\n    headers: {\r\n        'Content-Type': 'application/json; charset=UTF-8',\r\n        \"Access-Control-Allow-Origin\": \"*\"\r\n    }\r\n};\r\n\r\naxios.interceptors.request.use((config) => {\r\n    const token = window.localStorage.getItem('jwt');\r\n    if (token) config.headers.Authorization = `Bearer ${token}`;\r\n\r\n    return config;\r\n}, error => {\r\n    return Promise.reject(error);\r\n})\r\n\r\naxios.interceptors.response.use(undefined, error => {\r\n    if (error.message === 'Network Error' && !error.response) {\r\n        toast.error('Network Error - Please, make sure API is running!')\r\n    }\r\n    const {status, data, config} = error.response;\r\n    if (status === 404) {\r\n        history.push('/notFound');\r\n    }\r\n    if (status === 400 && config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n        history.push('/notFound')\r\n    }\r\n    if (status === 500) {\r\n        toast.error('Server error - Please, check the terminal for more info!');\r\n    }\r\n    throw error.response;\r\n})\r\n\r\nconst responseBody = (response: AxiosResponse) => response ? response.data : [];\r\n\r\nconst sleep = (ms: number) => (response: AxiosResponse) => new Promise<AxiosResponse>(resolve => setTimeout(() => resolve(response), ms));\r\n\r\nconst request = {\r\n    get: (url: string) => axios.get(url, axiosConfig).then(sleep(1000)).then(responseBody),\r\n    post: (url: string, body: {}) => axios.post(url, body, axiosConfig).then(sleep(1000)).then(responseBody),\r\n    put: (url: string, body: {}) => axios.put(url, body, axiosConfig).then(sleep(1000)).then(responseBody),\r\n    del: (url: string) => axios.delete(url, axiosConfig).then(sleep(1000)).then(responseBody),\r\n\r\n}\r\n\r\nconst Activities = {\r\n    list: (): Promise<IActivity[]> => request.get('/activities/'),\r\n    details: (id: string) => request.get('/activities/' + id),\r\n    create: (activity: IActivity) => request.post('/activities/', activity),\r\n    update: (activity: IActivity) => request.put('/activities/' + activity.id, activity),\r\n    delete: (id: string) => request.del(`/activities/${id}`),\r\n}\r\n\r\nconst User = {\r\n    current: (): Promise<IUser> => request.get('user/'),\r\n    login: (user: IUserFormValues): Promise<IUser> => request.post(`/user/login`, user),\r\n    register: (user: IUserFormValues): Promise<IUser> => request.post(`/user/register`, user)\r\n}\r\n\r\n\r\nexport default {\r\n    Activities,\r\n    User\r\n};","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\layout\\LoadingComponent.tsx",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\stores\\activityStore.ts",["133"],"import {action, computed, configure, makeObservable, observable, runInAction} from \"mobx\";\r\nimport {SyntheticEvent} from \"react\";\r\nimport {IActivity} from \"../models/activity\";\r\nimport agent from \"../api/agent\";\r\nimport {v4 as uuid} from \"uuid\";\r\nimport {history} from \"../../index\";\r\nimport {toast} from \"react-toastify\";\r\nimport {RootStore} from \"./rootStore\";\r\n\r\nexport default class ActivityStore {\r\n\r\n    rootStore: RootStore;\r\n\r\n    @observable activityRegistry = new Map();\r\n    @observable loadingInitial = false;\r\n    @observable activity: IActivity | null = null;\r\n    @observable submitting = false;\r\n    @observable target = '';\r\n\r\n    @computed get activitiesByDates() {\r\n        return this.groupActivitiesByDates(Array.from(this.activityRegistry.values()));\r\n    }\r\n\r\n    groupActivitiesByDates(activities: IActivity[]) {\r\n        const sortedActivities = activities\r\n            .sort(\r\n                ((a, b) => a.date.getTime() - b.date.getTime())\r\n            )\r\n\r\n        return Object.entries(sortedActivities.reduce((activities, activity) => {\r\n            const date = activity.date.toISOString().split('T')[0];\r\n            activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n\r\n            return activities;\r\n        }, {} as { [key: string]: IActivity[] }));\r\n    }\r\n\r\n    constructor(rootStore: RootStore) {\r\n        makeObservable(this);\r\n        this.rootStore = rootStore\r\n    }\r\n\r\n    @action loadActivities = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const activities = await agent.Activities.list();\r\n            runInAction(() => {\r\n                activities.forEach(activity => {\r\n                    activity.date = new Date(activity.date);\r\n                    this.activityRegistry.set(activity.id, activity);\r\n                });\r\n                this.loadingInitial = false\r\n            });\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.loadingInitial = false\r\n            });\r\n        }\r\n    }\r\n\r\n    @action loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n        if (activity) {\r\n            this.activity = activity;\r\n            return activity;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                runInAction(() => {\r\n                    activity.date = new Date(activity.date);\r\n                    this.activity = activity;\r\n                    this.activityRegistry.set(activity.id, activity);\r\n                    this.loadingInitial = false;\r\n                })\r\n                return activity;\r\n            } catch (error) {\r\n                runInAction(() => {\r\n                    this.loadingInitial = false;\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    @action clearActivity = () => {\r\n        this.activity = null;\r\n    }\r\n\r\n    getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n\r\n    @action createActivity = async (activity: IActivity) => {\r\n        this.submitting = true;\r\n        try {\r\n            activity.id = uuid();\r\n            await agent.Activities.create(activity);\r\n            runInAction(() => {\r\n                this.activityRegistry.set(activity.id, activity);\r\n                this.submitting = false;\r\n            })\r\n            history.push(`/activities/${activity.id}`)\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.submitting = false;\r\n            });\r\n            toast.error('Problem submitting data');\r\n            console.log(error.response);\r\n        }\r\n    }\r\n\r\n    @action deleteActivity = async (event: SyntheticEvent<HTMLButtonElement>, id: string) => {\r\n        this.submitting = true;\r\n        try {\r\n            this.target = event.currentTarget.name;\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n                this.submitting = false;\r\n                this.target = '';\r\n                this.activity = null;\r\n            });\r\n\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.submitting = false;\r\n                this.target = '';\r\n                this.activity = null;\r\n            });\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    @action editActivity = async (activity: IActivity) => {\r\n        this.submitting = true;\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                this.activityRegistry.set(activity.id, activity);\r\n                this.activity = activity;\r\n                this.submitting = false;\r\n            });\r\n            history.push(`/activities/${activity.id}`)\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.submitting = false;\r\n            });\r\n            toast.error('Problem submitting data');\r\n            console.log(error.response);\r\n        }\r\n    }\r\n\r\n    @action openEditForm = (id: string) => {\r\n        this.activity = this.activityRegistry.get(id);\r\n    }\r\n\r\n\r\n    @action openCreateForm = () => {\r\n        this.activity = null;\r\n    }\r\n}\r\n","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\home\\HomePage.tsx",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\layout\\ScrollToTop.tsx",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityListItem.tsx",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedHeader.tsx",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedInfo.tsx",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedChat.tsx",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedSidebar.tsx",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\layout\\NotFound.tsx",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\common\\form\\TextInput.tsx",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\common\\form\\TextAreaInput.tsx",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\common\\form\\SelectInput.tsx",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\common\\form\\DateInput.tsx",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\common\\options\\categoryOptions.ts",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\common\\util\\util.ts",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\features\\user\\LoginForm.tsx",["134","135"],"import React, {useContext} from 'react';\r\nimport {Field, Form as FinalForm} from 'react-final-form';\r\nimport {Button, Form, Label} from \"semantic-ui-react\";\r\nimport TextInput from \"../../app/common/form/TextInput\";\r\nimport {RootStoreContext} from \"../../app/stores/rootStore\";\r\nimport {IUserFormValues} from \"../../app/models/User\";\r\nimport {FORM_ERROR} from \"final-form\";\r\nimport {combineValidators, isRequired} from \"revalidate\";\r\n\r\nconst validator = combineValidators({\r\n    email: isRequired('email'),\r\n    password: isRequired('password')\r\n});\r\n\r\n\r\nconst LoginForm = () => {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {login} = rootStore.userStore;\r\n\r\n    return (\r\n        <FinalForm\r\n            onSubmit={(values: IUserFormValues) => login(values).catch(error => ({\r\n                [FORM_ERROR]: error\r\n            }))}\r\n            validate={validator}\r\n            render={({handleSubmit, submitting, form, submitError, invalid, pristine, dirtySinceLastSubmit}) => (\r\n                <Form onSubmit={handleSubmit}>\r\n                    <Field name='email' component={TextInput} placeholder='Email' />\r\n                    <Field name='password' type={'password'} component={TextInput} placeholder='Password'/>\r\n                    {submitError && !dirtySinceLastSubmit && <Label color={\"red\"} basic content={submitError.statusText}/>}\r\n                    <br/>\r\n                    <Button disabled={invalid && !dirtySinceLastSubmit || pristine} loading={submitting} positive content='Login'/>\r\n                    <pre>{JSON.stringify(form.getState(), null, 2)}</pre>\r\n                </Form>\r\n            )}\r\n        />\r\n    );\r\n};\r\n\r\nexport default LoginForm;\r\n","C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\stores\\rootStore.ts",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\models\\activity.ts",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\stores\\userStore.ts",[],"C:\\projetos\\2020\\udemy\\Reactivities\\client-app\\src\\app\\stores\\commonStore.ts",[],{"ruleId":"136","replacedBy":"137"},{"ruleId":"138","replacedBy":"139"},{"ruleId":"140","severity":1,"message":"141","line":10,"column":12,"nodeType":"142","messageId":"143","endLine":10,"endColumn":22},{"ruleId":"144","severity":1,"message":"145","line":15,"column":8,"nodeType":"146","endLine":15,"endColumn":10,"suggestions":"147"},{"ruleId":"148","severity":1,"message":"149","line":69,"column":1,"nodeType":"150","endLine":72,"endColumn":3},{"ruleId":"140","severity":1,"message":"151","line":1,"column":27,"nodeType":"142","messageId":"143","endLine":1,"endColumn":36},{"ruleId":"152","severity":1,"message":"153","line":32,"column":47,"nodeType":"154","messageId":"155","endLine":32,"endColumn":49},{"ruleId":"152","severity":1,"message":"153","line":32,"column":72,"nodeType":"154","messageId":"155","endLine":32,"endColumn":74},"no-native-reassign",["156"],"no-negated-in-lhs",["157"],"@typescript-eslint/no-unused-vars","'isLoggedIn' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadActivities'. Either include it or remove the dependency array.","ArrayExpression",["158"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'configure' is defined but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","no-global-assign","no-unsafe-negation",{"desc":"159","fix":"160"},"Update the dependencies array to be: [loadActivities]",{"range":"161","text":"162"},[553,555],"[loadActivities]"]